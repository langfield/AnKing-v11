{
    "1596977558630": {
        "assetManager": {
            "enabled": true,
            "indentSize": 4,
            "insertStub": false,
            "scripts": [
                {
                    "code": "(function() {\n    //TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND\n    var tagID = \"XXXYYYZZZ\"\n\n    var tagContainer = document.getElementById(\"tags\")\n    var tags = document.getElementById(\"tags\").innerText.split(\" \")\n    tagContainer.innerHTML = \"\"\n\n    tags.forEach((tag) => {\n        let kbd = document.createElement(\"kbd\")\n        kbd.innerHTML = tag\n        tagContainer.appendChild(kbd)\n    })\n})()",
                    "conditions": [
                        "side",
                        "=",
                        "back"
                    ],
                    "description": "Script by Matthias Metelka | @kleinerpirat",
                    "enabled": true,
                    "label": "",
                    "name": "Tags",
                    "position": "into_template",
                    "type": "js",
                    "version": "v0.1"
                },
                {
                    "code": "/* Script by Matthias Metelka @kleinerpirat */\n\n(function () {\n    var observer = new MutationObserver(() => {\n        let rect = document.querySelector(\".closet-rect.is-active\")\n        if (rect) {\n            activate(rect)\n            observer.disconnect()\n            let rects = document.querySelectorAll(\".closet-rect.is-active\")\n            for (let rect of rects) {\n                rect.addEventListener(\"click\", reveal)\n            }\n            if (!globalThis.AnKingIOListening) {\n                document.addEventListener(\"keydown\", (event) => {\n                    if (event.key == \"n\") {\n                        let active = document.querySelector(\".closet-rect.is-highlighted\")\n                        if (active) incrementalReveal.call(active)\n                    }\n                    else if (event.key == \"g\") {\n                        for (let rect of rects) {\n                            incrementalReveal.call(rect)\n                        }\n                    }\n                })\n                globalThis.AnKingIOListening = true\n            }\n            let buttons = document.getElementsByClassName(\"extra-btn\")\n\n            function toggle() {\n                if (!this.classList.contains(\"uncollapsed\")) {\n                    this.nextElementSibling.classList.remove(\"hidden\")\n                    this.classList.add(\"uncollapsed\")\n                }\n                else {\n                    this.nextElementSibling.classList.add(\"hidden\")\n                    this.classList.remove(\"uncollapsed\")\n                }\n            }\n            for (let button of buttons) {\n                button.addEventListener(\"click\", toggle)\n            }\n        }\n    })\n    observer.observe(document.getElementById(\"qa\"), {\n        childList: true,\n        subtree: true\n    })\n\n    function activate(rect) {\n        rect.classList.add(\"is-highlighted\")\n        rect.addEventListener(\"click\", incrementalReveal)\n    }\n\n    function incrementalReveal() {\n        reveal.call(this)\n        let next = this.nextElementSibling\n        if (next) {\n            while (next.classList.contains(\"revealed\") && next.nextElementSibling) {\n                next = next.nextElementSibling\n            }\n            if (!next.classList.contains(\"revealed\")) activate(next)\n        }\n        else {\n            document.getElementById(\"extra-content\").classList.remove(\"hidden\")\n        }\n    }\n\n    function reveal() {\n        this.classList.remove(\"is-highlighted\")\n        this.classList.add(\"revealed\")\n    }\n})()",
                    "conditions": [
                        "side",
                        "=",
                        "back"
                    ],
                    "description": "Script by Matthias Metelka | @kleinerpirat",
                    "enabled": true,
                    "label": "",
                    "name": "Incremental IO",
                    "position": "into_template",
                    "type": "js",
                    "version": "v0.1"
                },
                {
                    "id": "1596977558630",
                    "storage": {
                        "code": "const elements = closet.template.anki.getQaChildNodes();\nconst memory = chooseMemory(\"closet__1\");\nconst filterManager = closet.FilterManager.make(preset, memory.map);\n\nconst output = [[elements, memory, filterManager]];\n\n\nfilterManager.install(\n    closet.recipes.shuffle({ tagname: \"mix\" }),\n    closet.recipes.order({ tagname: \"ord\" }),\n\n    closet.flashcard.recipes.cloze({\n        tagname: \"c\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n    }),\n    closet.flashcard.recipes.multipleChoice({\n        tagname: \"mc\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n    }),\n    closet.flashcard.recipes.sort({\n        tagname: \"sort\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n    }),\n\n    closet.browser.recipes.rect({\n        tagname: \"rect\",\n        defaultBehavior: closet.flashcard.behaviors.Hide,\n    }),\n);",
                        "conditions": [],
                        "description": "defaultBehavior: closet.flashcard.behaviors.Hide for \"rect\" is very important here.",
                        "enabled": true,
                        "version": "v0.1"
                    },
                    "tag": "ClosetUserScript"
                }
            ]
        },
        "assetManagerHtml": {
            "enabled": true,
            "fragments": [
                {
                    "code": "{{#I0}}\n{{#Image}}\n<div id=\"front-info\">\n<a href=\"https://www.ankingmed.com\"><img src=\"_AnKingRound.png\"></a>\n<div>IO-one by one card: Please flip to the backside.</div>\n<div class=\"help\">\n   <p>On the backside, your task is to incrementally reveal an image occlusion.\nClick on the active rectangle to reveal it and activate the next.</p>\n</div>\n</div>\n\n<div hidden>{{Image}}</div>\n{{/Image}}\n{{/I0}}\n",
                    "conditions": [],
                    "description": "This is the entrance for the front side",
                    "enabled": true,
                    "label": "Front",
                    "name": "FrontSide",
                    "version": "v1"
                },
                {
                    "code": "<div id=\"extras\" hidden>{{I0}}</div>\n\n<div class=\"header\">{{Header}}</div>\n<div class=\"io\">{{Image}}</div>\n\n<div class=\"hidden\" id=\"extra-content\">\n    <!-- LECTURE NOTES FIELD -->\n    {{#Personal Notes}}<button class=\"extra-btn\"><img src=\"_Anking_v3.png\"> Lecture Notes</button>\n    <div class=\"hints hidden\">{{edit:Personal Notes}}</div>{{/Personal Notes}}\n\n    <!-- MISSED QUESTIONS FIELD -->\n    {{#Missed Questions}}<button class=\"extra-btn\"><img src=\"_Anking_v3.png\"> Missed Questions</button>\n    <div class=\"hints hidden\">{{edit:Missed Questions}}</div>{{/Missed Questions}}\n\n    <div id=\"tags\">{{clickable::Tags}}</div>\n</div>\n\n<a class=\"logo\" href=\"https://www.ankingmed.com\">\n   <img src=\"_AnKingRound.png\" alt=\"The AnKing\">\n</a>\n\n{{%scripts}}\n\n",
                    "conditions": [],
                    "description": "This is the entrance for the back side",
                    "enabled": true,
                    "label": "Back",
                    "name": "BackSide",
                    "version": "v1"
                }
            ],
            "minify": false
        },
        "closetVersion": "0.5.3",
        "css": "@import url(\"__closet-0.5.3.css\");\n\n\n/*#########################################################\n################  USER CUSTOMIZATION START  ##############*/\n/* You can choose colors at www.htmlcolorcodes.com */\n\n\n/* TAGS ON/OFF DESKTOP & MOBILE*/\n#tags-container {\n  display: block; /* ‘none’ or ‘block’ */\n}\n\n.mobile #tags-container {\n  display: none; /* ‘none’ or ‘block’ */\n}\n\n/* MOVE TAGS UP FOR 'NO-DISTRACTIONS' ADD-ON */\n#tags-container {\n  padding-bottom: 0px; /* 0 normal, 55 to move up */\n}\n\n/*~~~~~~~~~FONT SIZE~~~~~~~~~*/\n/*NOTE: anything with 'px' will keep a font that size indefinitely, \n'rem' is a fraction of this size above and allows all text to change size with the above setting */\n/* Desktop */\nhtml {\n  font-size: 28px;\n}\n/* Mobile */\n.mobile {\n  font-size: 28px;\n}\n\n/*IPAD ADJUSTMENTS (currently not applied)\n.ipad .card {\n  font-size: 28px;\n}\n.ipad .hints {\n  font-size: 24px;\n}\n*/\n\n/*Revealed Hints Font Size*/\n.hints {\n  font-size: .85rem;\n}\n\n\n/*~~~~~~~~~FONT STYLE~~~~~~~~~*/\n.card,\nkbd {\n  font-family: Arial Greek, Arial; /*Step exam's font is Arial Greek*/\n}\n\n/*~~~~~~~MAX IMAGE HEIGHT/WIDTH~~~~~~~*/\nimg {\n  max-width: 100%; /* note: changing this may impact the occlusions */\n  max-height: 100%;\n}\n\n\n/*~~~~~~~~~COLORS~~~~~~~~~*/\n.card {\n  /* OCCLUSION RECTANGLE COLORS */\n  --rect-bg: moccasin;\n  --rect-border: olive;\n  --active-rect-bg: salmon;\n  --active-rect-border: yellow;\n}\n\n\n/* Default Text Color */\n.card {\n  color: black;\n}\n/* Background Color */\n.card {\n  background-color: #D1CFCE;\n}\n/* Hint Reveal Color */\n.hints {\n  color: #4297F9;\n}\n/* Missed Questions Hint Reveal Color */\n#missed {\n  color: red;\n}\n\n\n/*~~~~~~~~NIGHT MODE COLORS~~~~~~~~*/\n/* NM Default Text Color */\n.nightMode.card,\n.night_mode .card {\n  color: #FFFAFA !important;\n}\n/* NM Background Color */\n.nightMode.card,\n.night_mode .card {\n  background-color: #272828 !important;\n}\n/* NM Hint Reveal Color */\n.nightMode .hints,\n.night_mode .hints {\n  color: cyan;\n}\n\n\n/* COLOR ACCENTS FOR BOLD-ITALICS-UNDERLINE*/\nb {\n  color: inherit;\n}\n\nu {\n  color: inherit;\n}\n\ni {\n  color: inherit;\n}\n\n/*################  USER CUSTOMIZATION END  ################\n###########################################################*/\n\n\n/* Styling For Whole Card*/\n.card {\n  text-align: center;\n  font-size: 1rem;\n  height: 100%;\n  margin: 0px 15px;\n  flex-grow: 1;\n  padding-bottom: 1em;\n  margin-top: 15px;\n}\n.mobile .card {\n  padding-bottom: 5em;\n  margin: 1ex .3px;\n}\n\n\n/* ~~~~~~~~~ FIELDS ~~~~~~~~~ */\n/* Text When Hint Is Shown*/\n.hints {\n  font-style: italic;\n}\n\n\n/* ~~~~~~~~~ ADD-ON CONFIGURATIONS ~~~~~~~~~ */\n/*Compatibility with Image Style Editor add-on*/\n.card {\n  --w: 0%;\n}\n.mobile .card {\n  --w: 100% !important;\n}\n\n/*Max image width for resize images in editor add-on */\n.card [class^=ui-] img {\n  max-width: 100% !important;\n}\n\n/*Compatibility with resize images in editor add-on */\n.resizer {\n  min-width: 0% !important;\n}\n.mobile .resizer {\n  min-width: 100% !important;\n}\n\n/* Fix to make pop-up dictionary images the right size */\n.qtip img {\n  max-width: 95% !important;\n  max-height: 95% !important;\n}\n\n\n/* ~~~~~~~MNEMONICS LEFT JUSTIFIED~~~~~~~ */\n.mnemonics {\n  display: inline-block;\n  text-align: left; /* can change to center to 'turn off' this feature */\n}\n.centerbox {\n  text-align: center;\n}\n\n\n/* ~~~~~~ANKING HYPERLINK IMAGE~~~~~~ */\n#pic {\n  opacity: 0.0;\n  font-size: 16px;\n  font-family: Comic Sans !important;\n  font-style: bold;\n  height: 50px;\n  border: 0;\n  position: fixed;\n  bottom: 10px;\n  right: 10px;\n  display: block;\n}\n\n#pic:hover {\n  opacity: 1;\n  transition: opacity 0.2s ease;\n}\n\n.mobile #pic {\n  display: none;\n}\n\n\n/* ~~~~~~~ FRONT FORMATTING ~~~~~~~ */\n.header {\n  font-size: 1rem;\n  margin-bottom: 1em;\n}\n\n#front-info {\n  position: fixed;\n  top: 20vh;\n  width: 100%;\n  font-size: 20px;\n}\n\n.mobile #front-info {\n  width: 90vw;\n  font-size: 4.5vw;\n}\n\n#front-info img {\n  margin-bottom: 2em;\n  max-width: 150px !important;\n}\n\n\n/* ~~~~~~~ FRONT TOOLTIP ~~~~~~~ */\n.help {\n  position: fixed;\n  top: 18px;\n  right: 18px;\n  text-align: center;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  font-size: 0.8rem;\n  line-height: 26px;\n  cursor: default;\n}\n\n.help:before {\n  content: '?';\n  font-weight: bold;\n}\n\n.help:hover p {\n  display: block;\n  transform-origin: 100% 0%;\n  -webkit-animation: fadeIn 0.3s ease-in-out;\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n.help p {\n  display: none;\n  text-align: left;\n  background-color: #1E2021;\n  padding: 20px;\n  width: 300px;\n  position: absolute;\n  border-radius: 3px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);\n  right: -4px;\n  color: #FFF;\n  font-size: 16px;\n  line-height: 1.4;\n}\n\n.help p:before {\n  position: absolute;\n  content: '';\n  width: 0;\n  height: 0;\n  border: 6px solid transparent;\n  border-bottom-color: #1E2021;\n  right: 10px;\n  top: -12px;\n}\n\n.help-tip p:after {\n  width: 100%;\n  height: 40px;\n  content: '';\n  position: absolute;\n  top: -40px;\n  left: 0;\n}\n\n@-webkit-keyframes fadeIn {\n  0% {\n    opacity: 0;\n    transform: scale(0.6);\n  }\n\n  100% {\n    opacity: 100%;\n    transform: scale(1);\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 100%;\n  }\n}\n\n\n/* ~~~~~~INCREMENTAL REVEAL: Closet rects~~~~~~ */\n.closet-rect.is-active.is-back rect {\n  fill: var(--rect-bg);\n  stroke: var(--rect-border);\n  cursor: pointer;\n}\n\n.closet-rect.is-active.is-back.is-highlighted rect {\n  fill: var(--active-rect-bg);\n  stroke: var(--active-rect-border);\n}\n\n.closet-rect.revealed rect {\n  visibility: hidden;\n}\n\n\n/* ~~~~~~~~~ TAGS ~~~~~~~~~ */\n/* Container To Fix Tags At Bottom Of Screen */\n#tags-container{\n  position: fixed;\n  bottom: .5px;\n  width: 100%;\n  line-height: .45rem;\n  margin-left: -15px;\n  background-color: transparent; \n}\n\n/* Clickable Tags (need to download the add-on) */\nkbd {\n  display: inline-block;\n  letter-spacing: .2px;\n  font-weight: bold;\n  font-size: 12px !important;\n  text-shadow: none !important;\n  padding: 0.05rem 0.1rem !important;\n  margin: 1px !important;\n  border-radius: 4px;\n  border-width: 1.5px !important;\n  border-style: solid;\n  background-color: transparent !important;\n  box-shadow: none !important;\n  opacity: 0.5;\n  vertical-align: middle;\n  line-height: auto!important;\n  height: auto!important;\n}\n\n/* Tag Becomes More Visible On Hover */\nkbd:hover {\n  opacity: 1;\n  transition: opacity 0.2s ease;\n}\n\n/* Tag Colors */\nkbd:nth-of-type(1n+0) { border-color: #F44336; color: #F44336!important; }\nkbd:nth-of-type(2n+0) { border-color: #9C27B0; color: #9C27B0!important; }\nkbd:nth-of-type(3n+0) { border-color: #3F51B5; color: #3F51B5!important; }\nkbd:nth-of-type(4n+0) { border-color: #03A9F4; color: #03A9F4!important; }\nkbd:nth-of-type(5n+0) { border-color: #009688; color: #009688!important; }\nkbd:nth-of-type(6n+0) { border-color: #C0CA33; color: #C0CA33!important; }\nkbd:nth-of-type(7n+0) { border-color: #FF9800; color: #FF9800!important;}\nkbd:nth-of-type(8n+0) { border-color: #FF5722; color: #FF5722!important; }\nkbd:nth-of-type(9n+0) { border-color: #9E9E9E; color: #9E9E9E!important; }\nkbd:nth-of-type(10n+0) { border-color: #607D8B; color: #607D8B!important; }\n\n/* Tag Mobile Adjustments */\n.mobile kbd {\n  opacity: .9;\n  margin: 1px !important;\n  display: inline-block;\n  font-size: 10px !important;\n}\n.mobile #tags-container {\n  line-height: 0.6rem;\n  margin-left: 0px;\n}\n\n\n/* ~~~~~~~~~BUTTON LAYOUT~~~~~~~~~ */\n.button-general {\n  outline: 0;\n  border-radius: 0.12em;\n  border: 1px solid #525253 !important;\n  padding: 5px 5px;\n  text-align: center;\n  display: inline-block;\n  font-size: 9.5px;\n  background-color: #424242;\n  color: #AFAFAF !important;\n  margin-top: 8px;\n}\n.mobile .button-general { \n  font-size: 18px; padding: 9px 7px; \n}\n\n.expanded-button {\n  display: block;\n  margin: auto;\n  margin-top: 10px;\n  font-weight: bold;\n  width: 50% !important;\n  background:#ababab !important; \n  color:black !important; \n  font-weight:bold; \n  width:50% !important;\n}\n\n.mobile .btn-spacer {\n  display: block;\n  height: 10px;\n}\n\n\nhtml:not(.mobile) .button-general:hover {\n  color: #363638 !important;\n  cursor: default;\n  background-color: #746f6f !important;\n}\n\nhtml:not(.mobile) #button-ex:hover{\n  background-color: #E9E9E9 !important;\n}\n\nhtml:not(.mobile) #button-ln:hover{\n  background-color: #E9E9E9 !important;\n}\n\n#button-mq:not(.expanded-button) {\n  color: #c26165 !important;\n}\n\nhtml:not(.mobile) #button-mq:hover{\n  background-color: #FA8072 !important;\n  color: black!important;\n}\n\n/* Make it so tapping buttons doesn't trigger answering the card on mobile */\n.dummy-btn {\n\tbackground: none !important;\n\tcolor: inherit !important;\n\tborder: none !important;\n\tpadding: 0 !important;\n\tfont: inherit !important;\n\tcursor: inherit !important;\n\toutline: inherit !important;\n}",
        "did": 1,
        "flds": [
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "media": [],
                "meta": null,
                "name": "Image",
                "ord": 0,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "Header",
                "ord": 1,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "media": [],
                "meta": null,
                "name": "Extra",
                "ord": 2,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "Personal Notes",
                "ord": 3,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "Missed Questions",
                "ord": 4,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": true,
                "description": "",
                "font": "Arial",
                "media": [],
                "meta": null,
                "name": "I0",
                "ord": 5,
                "rtl": false,
                "size": 8,
                "sticky": false
            }
        ],
        "id": 1596977558630,
        "latexPost": "\\end{document}",
        "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
        "latexsvg": false,
        "mod": 1645205165,
        "name": "IO-one by one",
        "req": [
            [
                0,
                "all",
                [
                    0,
                    5
                ]
            ]
        ],
        "sortf": 1,
        "tags": [
            "Testing"
        ],
        "tmpls": [
            {
                "afmt": "<script>\n// ##############  OCCLUSION SHORTCUTS  ##############\nvar RevealIncrementalShortcut = \"N\";\nvar ToggleAllOcclusionsShortcut = \",\";\n\n// ##############  BUTTON SETTINGS  ##############\n// All buttons will also open with \"H\" if using the Hint Hotkeys add-on \nvar ButtonShortcuts = {\n    \"Extra\": \"Alt+1\",\n    \"Personal Notes\": \"Alt+2\",\n    \"Missed Questions\": \"Alt+3\",\n}\n\nvar ToggleAllButtonsShortcut = \"'\"\nvar ToggleNextButtonShortcut = \"H\";\n// change values from false to true to have the fields revealed from the start\nvar ButtonAutoReveal = {\n    \"Extra\": false,\n    \"Personal Notes\": false,\n    \"Missed Questions\": false,\n}\n\nvar ScrollToButton = true\n\n// ##############  TAG SHORTCUT  ##############\nvar toggleTagsShortcut = \"C\";\n\n// ENTER THE TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND\nvar tagID = \"XXXYYYZZZ\"\n\n// WHETHER THE WHOLE TAG OR ONLY THE LAST PART SHOULD BE SHOWN\n\nvar numTagLevelsToShow = 0;\n\n</script>\n\n\n<div id=\"extras\" hidden>{{I0}}</div>\n<div class=\"header\">{{Header}}</div>\n<button class=\"dummy-btn\">\n    <div class=\"io\">{{Image}}</div>\n</button>\n<br>\n<button id=\"button-reveal-next\" class=\"button-general\">Reveal Next</button>\n<button id=\"button-toggle-all\" class=\"button-general\">Toggle All</button>\n<br>\n<div class=\"btn-spacer\" hidden></div>\n\n<!-- TOGGLE HINT BUTTONS -->\n{{#Extra}}\n<span id = \"hint-ex\" class=\"hintBtn\" data-name=\"Extra\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-ex')\"></a>\n  <button id=\"button-ex\" class=\"button-general\" onclick=\"toggleHintBtn('hint-ex')\">\n    <img src=\"_Anking_v3.png\"> Extra\n  </button>\n  <div id=\"extra\" class=\"hints\" style=\"display: none;\">{{edit:Extra}}</div>\n</span>\n{{/Extra}}\n\n{{#Personal Notes}}\n<span id = \"hint-ln\" class=\"hintBtn\" data-name=\"Personal Notes\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-ln')\"></a>\n  <button id=\"button-ln\" class=\"button-general\" onclick=\"toggleHintBtn('hint-ln')\">\n    <img src=\"_Anking_v3.png\"> Personal Notes\n  </button>\n  <div id=\"personal-notes\" class=\"hints\" style=\"display: none;\">{{edit:Personal Notes}}</div>\n</span>\n{{/Personal Notes}}\n\n{{#Missed Questions}}\n<span id = \"hint-mq\" class=\"hintBtn\" data-name=\"Missed Questions\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-mq')\"></a>\n  <button id=\"button-mq\" class=\"button-general\" onclick=\"toggleHintBtn('hint-mq')\">\n    <img src=\"_Anking_v3.png\"> Missed Questions\n  </button>\n  <div id=\"missed-questions\" class=\"hints\" style=\"display: none;\">{{edit:Missed Questions}}</div>\n</span>\n{{/Missed Questions}}\n\n\n<!-- ANKING HYPERLINK IMAGE -->\n<a href=\"https://www.ankingmed.com\"><img src=\"_AnKingRound.png\" alt=\"The AnKing\" id=\"pic\"></a>\n\n<div id=\"anki-am\" data-name=\"Assets by ASSET MANAGER\" data-version=\"2.1\">\n\n<!-- NOT-PERSISTING EVENT LISTENER -->\n<script>\n  if (window.ankingEventListeners) {\n    for (const listener of ankingEventListeners) {\n      const type = listener[0]\n      const handler = listener[1]\n      document.removeEventListener(type, handler)\n    }\n  }\n  window.ankingEventListeners = []\n  \n  window.ankingAddEventListener = function(type, handler) {\n    document.addEventListener(type, handler)\n    window.ankingEventListeners.push([type, handler])\n  }\n</script>\n\n<!-- Shortcut Matcher Function -->\n<script>\n  var specialCharCodes = {\n    \"-\": \"minus\",\n    \"=\": \"equal\",\n    \"[\": \"bracketleft\",\n    \"]\": \"bracketright\",\n    \";\": \"semicolon\",\n    \"'\": \"quote\",\n    \"`\": \"backquote\",\n    \"\\\\\": \"backslash\",\n    \",\": \"comma\",\n    \".\": \"period\",\n    \"/\": \"slash\",\n  };\n  // Returns function that match keyboard event to see if it matches given shortcut.\n  function shortcutMatcher(shortcut) {\n    let shortcutKeys = shortcut.toLowerCase().split(/[+]/).map(key => key.trim())\n    let mainKey = shortcutKeys[shortcutKeys.length - 1]\n    if (mainKey.length === 1) {\n      if (/\\d/.test(mainKey)) {\n        mainKey = \"digit\" + mainKey\n      } else if (/[a-zA-Z]/.test(mainKey)) {\n        mainKey = \"key\" + mainKey\n      } else {\n        let code = specialCharCodes[mainKey];\n        if (code) {\n          mainKey = code\n        }\n      }\n    }\n    let ctrl = shortcutKeys.includes(\"ctrl\")\n    let shift = shortcutKeys.includes(\"shift\")\n    let alt = shortcutKeys.includes(\"alt\")\n\n    let matchShortcut = function (ctrl, shift, alt, mainKey, event) {\n      if (mainKey !== event.code.toLowerCase()) return false\n      if (ctrl !== (event.ctrlKey || event.metaKey)) return false\n      if (shift !== event.shiftKey) return false\n      if (alt !== event.altKey) return false\n      return true\n    }.bind(window, ctrl, shift, alt, mainKey)\n    \n    return matchShortcut\n  }\n</script>\n\n<!-- CLICKABLE COLORFUL TAGS -->\n{{#Tags}}\n<div id=\"tags-container\">{{clickable::Tags}}</div>\n<script>\n  var tagContainer = document.getElementById(\"tags-container\")\n  if (tagContainer.childElementCount == 0) {\n    var tagList = tagContainer.innerHTML.split(\" \");\n    var kbdList = [];\n    var newTagContent = document.createElement(\"div\");\n\n    for (var i = 0; i < tagList.length; i++) {\n      var newTag = document.createElement(\"kbd\");\n      var tag = tagList[i];\n      // numTagLevelsToShow == 0 means the whole tag should be shown\n      if(numTagLevelsToShow != 0){\n        tag = tag.split('::').slice(-numTagLevelsToShow).join(\"::\");\n      }\n      newTag.innerHTML = tag;\n      newTagContent.append(newTag)\n    }\n    tagContainer.innerHTML = newTagContent.innerHTML;\n    tagContainer.style.cursor = \"default\";\n  }\n  if (tagContainer.innerHTML.indexOf(tagID) != -1) {\n    tagContainer.style.backgroundColor = \"rgba(251,11,11,.15)\";\n  }\n\n  function showtags() {\n    var tagContainerShortcut = document.getElementById(\"tags-container\");\n\n    if (tagContainerShortcut.style.display\n      === \"none\") {\n      tagContainerShortcut.style.display = \"block\";\n    } else {\n      tagContainerShortcut.style.display =\n        \"none\";\n    }\n  }\n  \n  var isShortcut = shortcutMatcher(toggleTagsShortcut)\n  ankingAddEventListener('keyup', function (e) {\n      if (isShortcut(e)) {\n          showtags();\n      }\n  });\n\n</script>\n{{/Tags}}\n    \n<!-- HINT BUTTONS SETUP -->\n<script>\n    (function() {\n      window.toggleHintBtn = function(containerId, noScrolling=false) {\n        const container = document.getElementById(containerId)\n        const link = container.getElementsByTagName(\"a\")[0]\n        const button = container.getElementsByTagName(\"button\")[0]\n        const hint = container.getElementsByTagName(\"div\")[0]\n    \n        if (hint.style.display == \"none\") {\n          button.classList.add(\"expanded-button\")\n          hint.style.display = \"block\"\n          link.style.display = \"none\"\n          if (ScrollToButton && !noScrolling) {\n            hint.scrollIntoView({\n              behavior: \"smooth\", // \"auto\" for instant scrolling\n              block: \"start\",\n              inline: \"nearest\"\n            });\n          }\n        } else {\n          button.classList.remove(\"expanded-button\")\n          hint.style.display = \"none\"\n          link.style.display = \"\"\n        }\n      }\n\n      window.toggleNextButton = function(){\n        // adapted from Hint Hotkey add-on\n        var customEvent = document.createEvent('MouseEvents');\n        customEvent.initEvent('click', false, true);\n        var arr = document.getElementsByTagName('a');\n        for (var i=0; i<arr.length; i++) {\n          var el = arr[i];\n          if (el.style.display === 'none') {\n            continue;\n          }\n          if (el.classList.contains(\"hint\")) {\n            el.dispatchEvent(customEvent);\n            break\n          }\n        }\n      }\n        \n      const isToggleNextShortcut = shortcutMatcher(ToggleNextButtonShortcut)\n      ankingAddEventListener(\"keydown\", (evt) => {\n        if (evt.repeat) return\n        if (isToggleNextShortcut(evt)) {\n          toggleNextButton()\n        }\n      })\n    \n      const setupHintBtn = function(elem) {\n        const containerId = elem.id\n        const fieldName = elem.dataset.name\n        const button = elem.getElementsByClassName(\"button\")[0]\n        \n        if (ButtonAutoReveal[fieldName]) {\n          toggleHintBtn(containerId, noScrolling=true)\n        }\n    \n        const isShortcut = shortcutMatcher(ButtonShortcuts[fieldName])\n        const isToggleAllShortcut = shortcutMatcher(ToggleAllButtonsShortcut)\n        ankingAddEventListener(\"keydown\", (evt) => {\n          if (evt.repeat) return\n          if (isShortcut(evt) || isToggleAllShortcut(evt)) {\n            toggleHintBtn(containerId)\n          }\n        })\n      }\n    \n      const hints = document.getElementsByClassName(\"hintBtn\")\n      for (let i = 0; i < hints.length; i++) {\n        setupHintBtn(hints[i])\n      }\n    })()\n    </script>\n\n\n<!-- INCREMENTAL IMAGE OCCLUSION SCRIPT -->\n<script>\n  document.getElementById(\"qa\").style.removeProperty(\"display\")\n</script>\n<script data-name=\"Incremental IO\" data-version=\"v0.1\">\n  /* Script by Matthias Metelka @kleinerpirat */  \n\n  function setupIncrementalIO() {\n    var observer = new MutationObserver(() => {\n      document.getElementById(\"button-toggle-all\").addEventListener(\"click\", toggleAll)\n      document.getElementById(\"button-reveal-next\").addEventListener(\"click\", toggleNext)\n      \n      let rect = document.querySelector(\".closet-rect.is-active\")\n      if (rect) {\n        activate(rect)\n        observer.disconnect()\n        globalThis.AnkingIORects = document.querySelectorAll(\".closet-rect.is-active\")\n        for (let rect of globalThis.AnkingIORects) {\n          rect.addEventListener(\"click\", reveal)\n        }\n        if (!globalThis.AnKingIOListening) {\n          let isRevealIncShortcut = shortcutMatcher(RevealIncrementalShortcut)\n          let isToggleAllShortcut = shortcutMatcher(ToggleAllOcclusionsShortcut)\n          document.addEventListener(\"keydown\", (evt) => {\n            if (evt.repeat) return\n            evt = evt || window.event\n            if (isRevealIncShortcut(evt)) {\n              toggleNext()\n            } else if (isToggleAllShortcut(evt)) {\n              toggleAll()\n            }\n          })\n          globalThis.AnKingIOListening = true\n        }\n        \n        let buttons = document.getElementsByClassName(\"extra-btn\")\n        function toggle() {\n          if (!this.classList.contains(\"uncollapsed\")) {\n            this.nextElementSibling.classList.remove(\"hidden\")\n            this.classList.add(\"uncollapsed\")\n          }\n          else {\n            this.nextElementSibling.classList.add(\"hidden\")\n            this.classList.remove(\"uncollapsed\")\n          }\n        }\n        for (let button of buttons) {\n          button.addEventListener(\"click\", toggle)\n        }\n        \n      }\n    })\n    observer.observe(document.getElementById(\"qa\"), {\n      childList: true,\n      subtree: true\n    })\n    \n    \n    function toggleNext() {\n      let active = document.querySelector(\".closet-rect.is-highlighted\")\n      if (active) incrementalReveal.call(active)\n    }\n    \n    function toggleAll() {\n      let allRevealed = true\n      for (let rect of globalThis.AnkingIORects) {\n        if (!rect.classList.contains(\"revealed\")) allRevealed = false\n      }\n      if (allRevealed) {\n        for (let rect of globalThis.AnkingIORects) {\n          hide.call(rect)\n        }\n        let newActiveRect = document.querySelector(\".closet-rect.is-active\")\n        activate(newActiveRect)\n      } else {\n        for (let rect of globalThis.AnkingIORects) {\n          reveal.call(rect)\n        }\n      }\n    }\n    \n    function incrementalReveal() {\n      reveal.call(this)\n      let next = this.nextElementSibling\n      if (next) {\n        while (next.classList.contains(\"revealed\") && next.nextElementSibling) {\n          next = next.nextElementSibling\n        }\n        if (!next.classList.contains(\"revealed\")) activate(next)\n      }\n      else if (document.getElementById(\"extra-content\")) {\n        document.getElementById(\"extra-content\").classList.remove(\"hidden\")\n      }\n    }\n    \n    function reveal() {\n      this.classList.remove(\"is-highlighted\")\n      this.classList.add(\"revealed\")\n    }\n    \n    function hide() {\n      this.classList.remove(\"revealed\")\n      this.removeEventListener(\"click\", incrementalReveal)\n    }\n    \n    function activate(rect) {\n      rect.classList.add(\"is-highlighted\")\n      rect.addEventListener(\"click\", incrementalReveal)\n    }\n    \n  }\n  setupIncrementalIO()\n</script>\n\n<script data-name=\"Closet Setup\" data-version=\"v0.1\">\n  function closetUserLogic(closet, preset, chooseMemory) {\n    const elements = closet.template.anki.getQaChildNodes();\n    const memory = chooseMemory(\"closet__1\");\n    const filterManager = closet.FilterManager.make(preset, memory.map);\n    \n    const output = [[elements, memory, filterManager]];\n    \n    filterManager.install(\n      closet.recipes.shuffle({ tagname: \"mix\" }),\n      closet.recipes.order({ tagname: \"ord\" }),\n      \n      closet.flashcard.recipes.cloze({\n        tagname: \"c\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n      }),\n      closet.flashcard.recipes.multipleChoice({\n        tagname: \"mc\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n      }),\n      closet.flashcard.recipes.sort({\n        tagname: \"sort\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n      }),\n      closet.browser.recipes.rect({\n        tagname: \"rect\",\n        defaultBehavior: closet.flashcard.behaviors.Hide,\n      }),\n    );;\n    return output;\n  }\n  \n  var getAnkiPrefix = () => globalThis.ankiPlatform === \"desktop\" ? \"\" : globalThis.AnkiDroidJS ? \"https://appassets.androidplatform.net\" : \".\";\n  \n  var closetPromise = import(`${getAnkiPrefix()}/__closet-0.5.3.js`);\n  closetPromise\n  .then(\n    ({ closet }) => closet.template.anki.initialize(closet, closetUserLogic, \"{{Card}}\", \"{{Tags}}\", \"back\"),\n    (error) => console.log(\"An error occured while loading Closet:\", error))\n  .catch((error) => console.log(\"An error occured while executing Closet:\", error));\n  \n  if (globalThis.onUpdateHook) {\n    onUpdateHook.push(() => closetPromise);\n  }\n</script>\n</div>",
                "bafmt": "",
                "bfont": "",
                "bqfmt": "",
                "bsize": 0,
                "did": null,
                "name": "Card 1",
                "ord": 0,
                "qfmt": "<!-- version 120f234 -->\n<script>\n// ############## USER CONFIGURATION START ##############\n// Auto flip to back when One by one mode.\nvar autoflip = false \n\n// ##############  TAG SHORTCUT  ##############\nvar toggleTagsShortcut = \"C\";\n\n// ENTER THE TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND\nvar tagID = \"XXXYYYZZZ\"\n\n// WHETHER THE WHOLE TAG OR ONLY THE LAST PART SHOULD BE SHOWN\n\nvar numTagLevelsToShow = 0;\n\n// ############## USER CONFIGURATION END ##############\n</script>\n\n\n<!-- CLOZE ONE BY ONE AUTOFLIP -->\n<script>\n  var clozeOneByOneEnabled = true;\n  \n  window.clozeHints = [];\n  if (clozeOneByOneEnabled) {\n    // Save cloze hints to display in the back\n    let clozes = document.getElementsByClassName(\"cloze\")\n    for(var i = 0; i < clozes.length; i++) {\n      if (clozes[i].innerHTML === \"[...]\") {\n        window.clozeHints.push(\"\")\n      } else {\n        window.clozeHints.push(clozes[i].innerHTML)\n      }\n    }\n\n    if(autoflip) {\n      // avoid flickering. Must unset this in the back.\n      document.getElementById(\"qa\").style.display = \"none\";\n\n      if (window.pycmd) {\n        pycmd(\"ans\")\n      } else if (window.showAnswer) {\n        showAnswer()\n      }    \n      // AnkiMobile JS API doesn't have one for show answer. \n      // Best alternative is to use Taps/Swipes to show answer.\n    }\n  }\n</script>\n\n<!-- Shortcut Matcher Function -->\n<script>\n  var specialCharCodes = {\n    \"-\": \"minus\",\n    \"=\": \"equal\",\n    \"[\": \"bracketleft\",\n    \"]\": \"bracketright\",\n    \";\": \"semicolon\",\n    \"'\": \"quote\",\n    \"`\": \"backquote\",\n    \"\\\\\": \"backslash\",\n    \",\": \"comma\",\n    \".\": \"period\",\n    \"/\": \"slash\",\n  };\n  // Returns function that match keyboard event to see if it matches given shortcut.\n  function shortcutMatcher(shortcut) {\n    let shortcutKeys = shortcut.toLowerCase().split(/[+]/).map(key => key.trim())\n    let mainKey = shortcutKeys[shortcutKeys.length - 1]\n    if (mainKey.length === 1) {\n      if (/\\d/.test(mainKey)) {\n        mainKey = \"digit\" + mainKey\n      } else if (/[a-zA-Z]/.test(mainKey)) {\n        mainKey = \"key\" + mainKey\n      } else {\n        let code = specialCharCodes[mainKey];\n        if (code) {\n          mainKey = code\n        }\n      }\n    }\n    let ctrl = shortcutKeys.includes(\"ctrl\")\n    let shift = shortcutKeys.includes(\"shift\")\n    let alt = shortcutKeys.includes(\"alt\")\n\n    let matchShortcut = function (ctrl, shift, alt, mainKey, event) {\n      if (mainKey !== event.code.toLowerCase()) return false\n      if (ctrl !== (event.ctrlKey || event.metaKey)) return false\n      if (shift !== event.shiftKey) return false\n      if (alt !== event.altKey) return false\n      return true\n    }.bind(window, ctrl, shift, alt, mainKey)\n    \n    return matchShortcut\n  }\n</script>\n\n<!-- NOT-PERSISTING EVENT LISTENER -->\n<script>\n  if (window.ankingEventListeners) {\n    for (const listener of ankingEventListeners) {\n      const type = listener[0]\n      const handler = listener[1]\n      document.removeEventListener(type, handler)\n    }\n  }\n  window.ankingEventListeners = []\n  \n  window.ankingAddEventListener = function(type, handler) {\n    document.addEventListener(type, handler)\n    window.ankingEventListeners.push([type, handler])\n  }\n</script>\n\n<!-- CLICKABLE COLORFUL TAGS -->\n{{#Tags}}\n<div id=\"tags-container\">{{clickable::Tags}}</div>\n<script>\n  var tagContainer = document.getElementById(\"tags-container\")\n  if (tagContainer.childElementCount == 0) {\n    var tagList = tagContainer.innerHTML.split(\" \");\n    var kbdList = [];\n    var newTagContent = document.createElement(\"div\");\n\n    for (var i = 0; i < tagList.length; i++) {\n      var newTag = document.createElement(\"kbd\");\n      var tag = tagList[i];\n      // numTagLevelsToShow == 0 means the whole tag should be shown\n      if(numTagLevelsToShow != 0){\n        tag = tag.split('::').slice(-numTagLevelsToShow).join(\"::\");\n      }\n      newTag.innerHTML = tag;\n      newTagContent.append(newTag)\n    }\n    tagContainer.innerHTML = newTagContent.innerHTML;\n    tagContainer.style.cursor = \"default\";\n  }\n  if (tagContainer.innerHTML.indexOf(tagID) != -1) {\n    tagContainer.style.backgroundColor = \"rgba(251,11,11,.15)\";\n  }\n\n  function showtags() {\n    var tagContainerShortcut = document.getElementById(\"tags-container\");\n\n    if (tagContainerShortcut.style.display\n      === \"none\") {\n      tagContainerShortcut.style.display = \"block\";\n    } else {\n      tagContainerShortcut.style.display =\n        \"none\";\n    }\n  }\n  \n  var isShortcut = shortcutMatcher(toggleTagsShortcut)\n  ankingAddEventListener('keyup', function (e) {\n      if (isShortcut(e)) {\n          showtags();\n      }\n  });\n\n</script>\n{{/Tags}}\n\n{{#I0}}\n{{#Image}}\n<div id=\"front-info\">\n   <a href=\"https://www.ankingmed.com\"><img src=\"_AnKingRound.png\"></a>\n   <div>This is an Image Occlusion one by one card: Please flip to the backside.</div>\n   <div class=\"help\">\n      <p>On the backside, your task is to incrementally reveal an image occlusion.\n         Click on the active rectangle to reveal it and activate the next.</p>\n   </div>\n</div>\n\n<div hidden>{{Image}}</div>\n{{/Image}}\n{{/I0}}",
                "scratchPad": true
            }
        ],
        "type": 0,
        "usn": -1,
        "vers": []
    }
}