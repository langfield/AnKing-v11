{
    "1596977558630": {
        "assetManager": {
            "enabled": true,
            "indentSize": 4,
            "insertStub": false,
            "scripts": [
                {
                    "code": "(function() {\n    //TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND\n    var tagID = \"XXXYYYZZZ\"\n\n    var tagContainer = document.getElementById(\"tags\")\n    var tags = document.getElementById(\"tags\").innerText.split(\" \")\n    tagContainer.innerHTML = \"\"\n\n    tags.forEach((tag) => {\n        let kbd = document.createElement(\"kbd\")\n        kbd.innerHTML = tag\n        tagContainer.appendChild(kbd)\n    })\n})()",
                    "conditions": [
                        "side",
                        "=",
                        "back"
                    ],
                    "description": "Script by Matthias Metelka | @kleinerpirat",
                    "enabled": true,
                    "label": "",
                    "name": "Tags",
                    "position": "into_template",
                    "type": "js",
                    "version": "v0.1"
                },
                {
                    "code": "/* Script by Matthias Metelka @kleinerpirat */\n\n(function () {\n    var observer = new MutationObserver(() => {\n        let rect = document.querySelector(\".closet-rect.is-active\")\n        if (rect) {\n            activate(rect)\n            observer.disconnect()\n            let rects = document.querySelectorAll(\".closet-rect.is-active\")\n            for (let rect of rects) {\n                rect.addEventListener(\"click\", reveal)\n            }\n            if (!globalThis.AnKingIOListening) {\n                document.addEventListener(\"keydown\", (event) => {\n                    if (event.key == \"n\") {\n                        let active = document.querySelector(\".closet-rect.is-highlighted\")\n                        if (active) incrementalReveal.call(active)\n                    }\n                    else if (event.key == \"g\") {\n                        for (let rect of rects) {\n                            incrementalReveal.call(rect)\n                        }\n                    }\n                })\n                globalThis.AnKingIOListening = true\n            }\n            let buttons = document.getElementsByClassName(\"extra-btn\")\n\n            function toggle() {\n                if (!this.classList.contains(\"uncollapsed\")) {\n                    this.nextElementSibling.classList.remove(\"hidden\")\n                    this.classList.add(\"uncollapsed\")\n                }\n                else {\n                    this.nextElementSibling.classList.add(\"hidden\")\n                    this.classList.remove(\"uncollapsed\")\n                }\n            }\n            for (let button of buttons) {\n                button.addEventListener(\"click\", toggle)\n            }\n        }\n    })\n    observer.observe(document.getElementById(\"qa\"), {\n        childList: true,\n        subtree: true\n    })\n\n    function activate(rect) {\n        rect.classList.add(\"is-highlighted\")\n        rect.addEventListener(\"click\", incrementalReveal)\n    }\n\n    function incrementalReveal() {\n        reveal.call(this)\n        let next = this.nextElementSibling\n        if (next) {\n            while (next.classList.contains(\"revealed\") && next.nextElementSibling) {\n                next = next.nextElementSibling\n            }\n            if (!next.classList.contains(\"revealed\")) activate(next)\n        }\n        else {\n            document.getElementById(\"extra-content\").classList.remove(\"hidden\")\n        }\n    }\n\n    function reveal() {\n        this.classList.remove(\"is-highlighted\")\n        this.classList.add(\"revealed\")\n    }\n})()",
                    "conditions": [
                        "side",
                        "=",
                        "back"
                    ],
                    "description": "Script by Matthias Metelka | @kleinerpirat",
                    "enabled": true,
                    "label": "",
                    "name": "Incremental IO",
                    "position": "into_template",
                    "type": "js",
                    "version": "v0.1"
                },
                {
                    "id": "1596977558630",
                    "storage": {
                        "code": "const elements = closet.template.anki.getQaChildNodes();\nconst memory = chooseMemory(\"closet__1\");\nconst filterManager = closet.FilterManager.make(preset, memory.map);\n\nconst output = [[elements, memory, filterManager]];\n\n\nfilterManager.install(\n    closet.recipes.shuffle({ tagname: \"mix\" }),\n    closet.recipes.order({ tagname: \"ord\" }),\n\n    closet.flashcard.recipes.cloze({\n        tagname: \"c\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n    }),\n    closet.flashcard.recipes.multipleChoice({\n        tagname: \"mc\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n    }),\n    closet.flashcard.recipes.sort({\n        tagname: \"sort\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n    }),\n\n    closet.browser.recipes.rect({\n        tagname: \"rect\",\n        defaultBehavior: closet.flashcard.behaviors.Hide,\n    }),\n);",
                        "conditions": [],
                        "description": "defaultBehavior: closet.flashcard.behaviors.Hide for \"rect\" is very important here.",
                        "enabled": true,
                        "version": "v0.1"
                    },
                    "tag": "ClosetUserScript"
                }
            ]
        },
        "assetManagerHtml": {
            "enabled": true,
            "fragments": [
                {
                    "code": "{{#I0}}\n{{#Image}}\n<div id=\"front-info\">\n<a href=\"https://www.ankingmed.com\"><img src=\"_AnKingRound.png\"></a>\n<div>IO-one by one card: Please flip to the backside.</div>\n<div class=\"help\">\n   <p>On the backside, your task is to incrementally reveal an image occlusion.\nClick on the active rectangle to reveal it and activate the next.</p>\n</div>\n</div>\n\n<div hidden>{{Image}}</div>\n{{/Image}}\n{{/I0}}\n",
                    "conditions": [],
                    "description": "This is the entrance for the front side",
                    "enabled": true,
                    "label": "Front",
                    "name": "FrontSide",
                    "version": "v1"
                },
                {
                    "code": "<div id=\"extras\" hidden>{{I0}}</div>\n\n<div class=\"header\">{{Header}}</div>\n<div class=\"io\">{{Image}}</div>\n\n<div class=\"hidden\" id=\"extra-content\">\n    <!-- LECTURE NOTES FIELD -->\n    {{#Personal Notes}}<button class=\"extra-btn\"><img src=\"_Anking_v3.png\"> Lecture Notes</button>\n    <div class=\"hints hidden\">{{edit:Personal Notes}}</div>{{/Personal Notes}}\n\n    <!-- MISSED QUESTIONS FIELD -->\n    {{#Missed Questions}}<button class=\"extra-btn\"><img src=\"_Anking_v3.png\"> Missed Questions</button>\n    <div class=\"hints hidden\">{{edit:Missed Questions}}</div>{{/Missed Questions}}\n\n    <div id=\"tags\">{{clickable::Tags}}</div>\n</div>\n\n<a class=\"logo\" href=\"https://www.ankingmed.com\">\n   <img src=\"_AnKingRound.png\" alt=\"The AnKing\">\n</a>\n\n{{%scripts}}\n\n",
                    "conditions": [],
                    "description": "This is the entrance for the back side",
                    "enabled": true,
                    "label": "Back",
                    "name": "BackSide",
                    "version": "v1"
                }
            ],
            "minify": false
        },
        "closetVersion": "0.5.3",
        "css": "@import url(\"__closet-0.5.3.css\");\n\n\n/*#########################################################\n################  USER CUSTOMIZATION START  ##############*/\n/* You can choose colors at www.htmlcolorcodes.com */\n\n\n/* TAGS ON/OFF DESKTOP & MOBILE*/\n#tags-container {\n  display: block; /* ‘none’ or ‘block’ */\n}\n\n.mobile #tags-container {\n  display: none; /* ‘none’ or ‘block’ */\n}\n\n/* MOVE TAGS UP FOR 'NO-DISTRACTIONS' ADD-ON */\n#tags-container {\n  padding-bottom: 0px; /* 0 normal, 55 to move up */\n}\n\n/*~~~~~~~~~FONT SIZE~~~~~~~~~*/\n/*NOTE: anything with 'px' will keep a font that size indefinitely, \n'rem' is a fraction of this size above and allows all text to change size with the above setting */\n/* Desktop */\nhtml {\n  font-size: 28px;\n}\n/* Mobile */\n.mobile {\n  font-size: 28px;\n}\n\n/*IPAD ADJUSTMENTS (currently not applied)\n.ipad .card {\n  font-size: 28px;\n}\n.ipad .hints {\n  font-size: 24px;\n}\n*/\n\n/*Revealed Hints Font Size*/\n.hints {\n  font-size: .85rem;\n}\n\n\n/*~~~~~~~~~FONT STYLE~~~~~~~~~*/\n.card,\nkbd {\n  font-family: Arial Greek, Arial; /*Step exam's font is Arial Greek*/\n}\n\n/*~~~~~~~MAX IMAGE HEIGHT/WIDTH~~~~~~~*/\nimg {\n  max-width: 100%; /* note: changing this may impact the occlusions */\n  max-height: 100%;\n}\n\n\n/*~~~~~~~~~COLORS~~~~~~~~~*/\n.card {\n  /* OCCLUSION RECTANGLE COLORS */\n  --rect-bg: moccasin;\n  --rect-border: olive;\n  --active-rect-bg: salmon;\n  --active-rect-border: yellow;\n}\n\n\n/* Default Text Color */\n.card {\n  color: black;\n}\n/* Background Color */\n.card {\n  background-color: #D1CFCE;\n}\n/* Hint Reveal Color */\n.hints {\n  color: #4297F9;\n}\n/* Missed Questions Hint Reveal Color */\n#missed {\n  color: red;\n}\n\n\n/*~~~~~~~~NIGHT MODE COLORS~~~~~~~~*/\n/* NM Default Text Color */\n.nightMode.card,\n.night_mode .card {\n  color: #FFFAFA !important;\n}\n/* NM Background Color */\n.nightMode.card,\n.night_mode .card {\n  background-color: #272828 !important;\n}\n/* NM Hint Reveal Color */\n.nightMode .hints,\n.night_mode .hints {\n  color: cyan;\n}\n\n\n/* COLOR ACCENTS FOR BOLD-ITALICS-UNDERLINE*/\nb {\n  color: inherit;\n}\n\nu {\n  color: inherit;\n}\n\ni {\n  color: inherit;\n}\n\n/*################  USER CUSTOMIZATION END  ################\n###########################################################*/\n\n\n/* Styling For Whole Card*/\n.card {\n  text-align: center;\n  font-size: 1rem;\n  height: 100%;\n  margin: 0px 15px;\n  flex-grow: 1;\n  padding-bottom: 1em;\n  margin-top: 15px;\n}\n.mobile .card {\n  padding-bottom: 5em;\n  margin: 1ex .3px;\n}\n\n\n/* ~~~~~~~~~ FIELDS ~~~~~~~~~ */\n/* Text When Hint Is Shown*/\n.hints {\n  font-style: italic;\n}\n\n\n/* ~~~~~~~~~ ADD-ON CONFIGURATIONS ~~~~~~~~~ */\n/*Compatibility with Image Style Editor add-on*/\n.card {\n  --w: 0%;\n}\n.mobile .card {\n  --w: 100% !important;\n}\n\n/*Max image width for resize images in editor add-on */\n.card [class^=ui-] img {\n  max-width: 100% !important;\n}\n\n/*Compatibility with resize images in editor add-on */\n.resizer {\n  min-width: 0% !important;\n}\n.mobile .resizer {\n  min-width: 100% !important;\n}\n\n/* Fix to make pop-up dictionary images the right size */\n.qtip img {\n  max-width: 95% !important;\n  max-height: 95% !important;\n}\n\n\n/* ~~~~~~~MNEMONICS LEFT JUSTIFIED~~~~~~~ */\n.mnemonics {\n  display: inline-block;\n  text-align: left; /* can change to center to 'turn off' this feature */\n}\n.centerbox {\n  text-align: center;\n}\n\n\n/* ~~~~~~ANKING HYPERLINK IMAGE~~~~~~ */\n#pic {\n  opacity: 0.0;\n  font-size: 16px;\n  font-family: Comic Sans !important;\n  font-style: bold;\n  height: 50px;\n  border: 0;\n  position: fixed;\n  bottom: 10px;\n  right: 10px;\n  display: block;\n}\n\n#pic:hover {\n  opacity: 1;\n  transition: opacity 0.2s ease;\n}\n\n.mobile #pic {\n  display: none;\n}\n\n\n/* ~~~~~~~ FRONT FORMATTING ~~~~~~~ */\n.header {\n  font-size: 1rem;\n  margin-bottom: 1em;\n}\n\n#front-info {\n  position: fixed;\n  top: 20vh;\n  width: 100%;\n  font-size: 20px;\n}\n\n.mobile #front-info {\n  width: 90vw;\n  font-size: 4.5vw;\n}\n\n#front-info img {\n  margin-bottom: 2em;\n  max-width: 150px !important;\n}\n\n\n/* ~~~~~~~ FRONT TOOLTIP ~~~~~~~ */\n.help {\n  position: fixed;\n  top: 18px;\n  right: 18px;\n  text-align: center;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  font-size: 0.8rem;\n  line-height: 26px;\n  cursor: default;\n}\n\n.help:before {\n  content: '?';\n  font-weight: bold;\n}\n\n.help:hover p {\n  display: block;\n  transform-origin: 100% 0%;\n  -webkit-animation: fadeIn 0.3s ease-in-out;\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n.help p {\n  display: none;\n  text-align: left;\n  background-color: #1E2021;\n  padding: 20px;\n  width: 300px;\n  position: absolute;\n  border-radius: 3px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);\n  right: -4px;\n  color: #FFF;\n  font-size: 16px;\n  line-height: 1.4;\n}\n\n.help p:before {\n  position: absolute;\n  content: '';\n  width: 0;\n  height: 0;\n  border: 6px solid transparent;\n  border-bottom-color: #1E2021;\n  right: 10px;\n  top: -12px;\n}\n\n.help-tip p:after {\n  width: 100%;\n  height: 40px;\n  content: '';\n  position: absolute;\n  top: -40px;\n  left: 0;\n}\n\n@-webkit-keyframes fadeIn {\n  0% {\n    opacity: 0;\n    transform: scale(0.6);\n  }\n\n  100% {\n    opacity: 100%;\n    transform: scale(1);\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 100%;\n  }\n}\n\n\n/* ~~~~~~INCREMENTAL REVEAL: Closet rects~~~~~~ */\n.closet-rect.is-active.is-back rect {\n  fill: var(--rect-bg);\n  stroke: var(--rect-border);\n  cursor: pointer;\n}\n\n.closet-rect.is-active.is-back.is-highlighted rect {\n  fill: var(--active-rect-bg);\n  stroke: var(--active-rect-border);\n}\n\n.closet-rect.revealed rect {\n  visibility: hidden;\n}\n\n\n/* ~~~~~~~~~ TAGS ~~~~~~~~~ */\n/* Container To Fix Tags At Bottom Of Screen */\n#tags-container{\n  position: fixed;\n  bottom: .5px;\n  width: 100%;\n  line-height: .45rem;\n  margin-left: -15px;\n  background-color: transparent; \n}\n\n/* Clickable Tags (need to download the add-on) */\nkbd {\n  display: inline-block;\n  letter-spacing: .2px;\n  font-weight: bold;\n  font-size: 12px !important;\n  text-shadow: none !important;\n  padding: 0.05rem 0.1rem !important;\n  margin: 1px !important;\n  border-radius: 4px;\n  border-width: 1.5px !important;\n  border-style: solid;\n  background-color: transparent !important;\n  box-shadow: none !important;\n  opacity: 0.5;\n  vertical-align: middle;\n  line-height: auto!important;\n  height: auto!important;\n}\n\n/* Tag Becomes More Visible On Hover */\nkbd:hover {\n  opacity: 1;\n  transition: opacity 0.2s ease;\n}\n\n/* Tag Colors */\nkbd:nth-of-type(1n+0) { border-color: #F44336; color: #F44336!important; }\nkbd:nth-of-type(2n+0) { border-color: #9C27B0; color: #9C27B0!important; }\nkbd:nth-of-type(3n+0) { border-color: #3F51B5; color: #3F51B5!important; }\nkbd:nth-of-type(4n+0) { border-color: #03A9F4; color: #03A9F4!important; }\nkbd:nth-of-type(5n+0) { border-color: #009688; color: #009688!important; }\nkbd:nth-of-type(6n+0) { border-color: #C0CA33; color: #C0CA33!important; }\nkbd:nth-of-type(7n+0) { border-color: #FF9800; color: #FF9800!important;}\nkbd:nth-of-type(8n+0) { border-color: #FF5722; color: #FF5722!important; }\nkbd:nth-of-type(9n+0) { border-color: #9E9E9E; color: #9E9E9E!important; }\nkbd:nth-of-type(10n+0) { border-color: #607D8B; color: #607D8B!important; }\n\n/* Tag Mobile Adjustments */\n.mobile kbd {\n  opacity: .9;\n  margin: 1px !important;\n  display: inline-block;\n  font-size: 10px !important;\n}\n.mobile #tags-container {\n  line-height: 0.6rem;\n  margin-left: 0px;\n}\n\n\n/* ~~~~~~~~~BUTTON LAYOUT~~~~~~~~~ */\n.button-general {\n  outline: 0;\n  border-radius: 0.12em;\n  border: 1px solid #525253 !important;\n  padding: 5px 5px;\n  text-align: center;\n  display: inline-block;\n  font-size: 9.5px;\n  background-color: #424242;\n  color: #AFAFAF !important;\n  margin-top: 8px;\n}\n.mobile .button-general { \n  font-size: 18px; padding: 9px 7px; \n}\n\n.expanded-button {\n  display: block;\n  margin: auto;\n  margin-top: 10px;\n  font-weight: bold;\n  width: 50% !important;\n  background:#ababab !important; \n  color:black !important; \n  font-weight:bold; \n  width:50% !important;\n}\n\n.mobile .btn-spacer {\n  display: block;\n  height: 10px;\n}\n\n\nhtml:not(.mobile) .button-general:hover {\n  color: #363638 !important;\n  cursor: default;\n  background-color: #746f6f !important;\n}\n\nhtml:not(.mobile) #button-ex:hover{\n  background-color: #E9E9E9 !important;\n}\n\nhtml:not(.mobile) #button-ln:hover{\n  background-color: #E9E9E9 !important;\n}\n\n#button-mq:not(.expanded-button) {\n  color: #c26165 !important;\n}\n\nhtml:not(.mobile) #button-mq:hover{\n  background-color: #FA8072 !important;\n  color: black!important;\n}\n\n/* Make it so tapping buttons doesn't trigger answering the card on mobile */\n.dummy-btn {\n\tbackground: none !important;\n\tcolor: inherit !important;\n\tborder: none !important;\n\tpadding: 0 !important;\n\tfont: inherit !important;\n\tcursor: inherit !important;\n\toutline: inherit !important;\n}",
        "did": 1,
        "flds": [
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "media": [],
                "meta": null,
                "name": "Image",
                "ord": 0,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "Header",
                "ord": 1,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "media": [],
                "meta": null,
                "name": "Extra",
                "ord": 2,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "Personal Notes",
                "ord": 3,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "Missed Questions",
                "ord": 4,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": true,
                "description": "",
                "font": "Arial",
                "media": [],
                "meta": null,
                "name": "I0",
                "ord": 5,
                "rtl": false,
                "size": 8,
                "sticky": false
            }
        ],
        "id": 1596977558630,
        "latexPost": "\\end{document}",
        "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
        "latexsvg": false,
        "mod": 1645205165,
        "name": "IO-one by one",
        "req": [
            [
                0,
                "all",
                [
                    0,
                    5
                ]
            ]
        ],
        "sortf": 1,
        "tags": [
            "Testing"
        ],
        "tmpls": [
            {
                "afmt": "<script>\n// ##############  OCCLUSION SHORTCUTS  ##############\nvar RevealIncrementalShortcut = \"N\";\nvar ToggleAllOcclusionsShortcut = \",\";\n\n// ##############  BUTTON SETTINGS  ##############\n// All buttons will also open with \"H\" if using the Hint Hotkeys add-on \nvar ButtonShortcuts = {\n    \"Extra\": \"Alt+1\",\n    \"Personal Notes\": \"Alt+2\",\n    \"Missed Questions\": \"Alt+3\",\n}\n\nvar ToggleAllButtonsShortcut = \"'\"\nvar ToggleNextButtonShortcut = \"H\";\n// change values from false to true to have the fields revealed from the start\nvar ButtonAutoReveal = {\n    \"Extra\": false,\n    \"Personal Notes\": false,\n    \"Missed Questions\": false,\n}\n\nvar ScrollToButton = true\n\n// ##############  TAG SHORTCUT  ##############\nvar toggleTagsShortcut = \"C\";\n\n// ENTER THE TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND\nvar tagID = \"XXXYYYZZZ\"\n\n// WHETHER THE WHOLE TAG OR ONLY THE LAST PART SHOULD BE SHOWN\n\nvar numTagLevelsToShow = 0;\n\n</script>\n\n\n<div id=\"extras\" hidden>{{I0}}</div>\n<div class=\"header\">{{Header}}</div>\n<button class=\"dummy-btn\">\n    <div class=\"io\">{{Image}}</div>\n</button>\n<br>\n<button id=\"button-reveal-next\" class=\"button-general\">Reveal Next</button>\n<button id=\"button-toggle-all\" class=\"button-general\">Toggle All</button>\n<br>\n<div class=\"btn-spacer\" hidden></div>\n\n<!-- TOGGLE HINT BUTTONS -->\n{{#Extra}}\n<span id = \"hint-ex\" class=\"hintBtn\" data-name=\"Extra\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-ex')\"></a>\n  <button id=\"button-ex\" class=\"button-general\" onclick=\"toggleHintBtn('hint-ex')\">\n    <img src=\"_Anking_v3.png\"> Extra\n  </button>\n  <div id=\"extra\" class=\"hints\" style=\"display: none;\">{{edit:Extra}}</div>\n</span>\n{{/Extra}}\n\n{{#Personal Notes}}\n<span id = \"hint-ln\" class=\"hintBtn\" data-name=\"Personal Notes\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-ln')\"></a>\n  <button id=\"button-ln\" class=\"button-general\" onclick=\"toggleHintBtn('hint-ln')\">\n    <img src=\"_Anking_v3.png\"> Personal Notes\n  </button>\n  <div id=\"personal-notes\" class=\"hints\" style=\"display: none;\">{{edit:Personal Notes}}</div>\n</span>\n{{/Personal Notes}}\n\n{{#Missed Questions}}\n<span id = \"hint-mq\" class=\"hintBtn\" data-name=\"Missed Questions\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-mq')\"></a>\n  <button id=\"button-mq\" class=\"button-general\" onclick=\"toggleHintBtn('hint-mq')\">\n    <img src=\"_Anking_v3.png\"> Missed Questions\n  </button>\n  <div id=\"missed-questions\" class=\"hints\" style=\"display: none;\">{{edit:Missed Questions}}</div>\n</span>\n{{/Missed Questions}}\n\n\n<!-- ANKING HYPERLINK IMAGE -->\n<a href=\"https://www.ankingmed.com\"><img src=\"_AnKingRound.png\" alt=\"The AnKing\" id=\"pic\"></a>\n\n<div id=\"anki-am\" data-name=\"Assets by ASSET MANAGER\" data-version=\"2.1\">\n\n<!-- NOT-PERSISTING EVENT LISTENER -->\n<script>\n  if (window.ankingEventListeners) {\n    for (const listener of ankingEventListeners) {\n      const type = listener[0]\n      const handler = listener[1]\n      document.removeEventListener(type, handler)\n    }\n  }\n  window.ankingEventListeners = []\n  \n  window.ankingAddEventListener = function(type, handler) {\n    document.addEventListener(type, handler)\n    window.ankingEventListeners.push([type, handler])\n  }\n</script>\n\n<!-- Shortcut Matcher Function -->\n<script>\n  var specialCharCodes = {\n    \"-\": \"minus\",\n    \"=\": \"equal\",\n    \"[\": \"bracketleft\",\n    \"]\": \"bracketright\",\n    \";\": \"semicolon\",\n    \"'\": \"quote\",\n    \"`\": \"backquote\",\n    \"\\\\\": \"backslash\",\n    \",\": \"comma\",\n    \".\": \"period\",\n    \"/\": \"slash\",\n  };\n  // Returns function that match keyboard event to see if it matches given shortcut.\n  function shortcutMatcher(shortcut) {\n    let shortcutKeys = shortcut.toLowerCase().split(/[+]/).map(key => key.trim())\n    let mainKey = shortcutKeys[shortcutKeys.length - 1]\n    if (mainKey.length === 1) {\n      if (/\\d/.test(mainKey)) {\n        mainKey = \"digit\" + mainKey\n      } else if (/[a-zA-Z]/.test(mainKey)) {\n        mainKey = \"key\" + mainKey\n      } else {\n        let code = specialCharCodes[mainKey];\n        if (code) {\n          mainKey = code\n        }\n      }\n    }\n    let ctrl = shortcutKeys.includes(\"ctrl\")\n    let shift = shortcutKeys.includes(\"shift\")\n    let alt = shortcutKeys.includes(\"alt\")\n\n    let matchShortcut = function (ctrl, shift, alt, mainKey, event) {\n      if (mainKey !== event.code.toLowerCase()) return false\n      if (ctrl !== (event.ctrlKey || event.metaKey)) return false\n      if (shift !== event.shiftKey) return false\n      if (alt !== event.altKey) return false\n      return true\n    }.bind(window, ctrl, shift, alt, mainKey)\n    \n    return matchShortcut\n  }\n</script>\n\n<!-- CLICKABLE COLORFUL TAGS -->\n{{#Tags}}\n<div id=\"tags-container\">{{clickable::Tags}}</div>\n<script>\n  var tagContainer = document.getElementById(\"tags-container\")\n  if (tagContainer.childElementCount == 0) {\n    var tagList = tagContainer.innerHTML.split(\" \");\n    var kbdList = [];\n    var newTagContent = document.createElement(\"div\");\n\n    for (var i = 0; i < tagList.length; i++) {\n      var newTag = document.createElement(\"kbd\");\n      var tag = tagList[i];\n      // numTagLevelsToShow == 0 means the whole tag should be shown\n      if(numTagLevelsToShow != 0){\n        tag = tag.split('::').slice(-numTagLevelsToShow).join(\"::\");\n      }\n      newTag.innerHTML = tag;\n      newTagContent.append(newTag)\n    }\n    tagContainer.innerHTML = newTagContent.innerHTML;\n    tagContainer.style.cursor = \"default\";\n  }\n  if (tagContainer.innerHTML.indexOf(tagID) != -1) {\n    tagContainer.style.backgroundColor = \"rgba(251,11,11,.15)\";\n  }\n\n  function showtags() {\n    var tagContainerShortcut = document.getElementById(\"tags-container\");\n\n    if (tagContainerShortcut.style.display\n      === \"none\") {\n      tagContainerShortcut.style.display = \"block\";\n    } else {\n      tagContainerShortcut.style.display =\n        \"none\";\n    }\n  }\n  \n  var isShortcut = shortcutMatcher(toggleTagsShortcut)\n  ankingAddEventListener('keyup', function (e) {\n      if (isShortcut(e)) {\n          showtags();\n      }\n  });\n\n</script>\n{{/Tags}}\n    \n<!-- HINT BUTTONS SETUP -->\n<script>\n    (function() {\n      window.toggleHintBtn = function(containerId, noScrolling=false) {\n        const container = document.getElementById(containerId)\n        const link = container.getElementsByTagName(\"a\")[0]\n        const button = container.getElementsByTagName(\"button\")[0]\n        const hint = container.getElementsByTagName(\"div\")[0]\n    \n        if (hint.style.display == \"none\") {\n          button.classList.add(\"expanded-button\")\n          hint.style.display = \"block\"\n          link.style.display = \"none\"\n          if (ScrollToButton && !noScrolling) {\n            hint.scrollIntoView({\n              behavior: \"smooth\", // \"auto\" for instant scrolling\n              block: \"start\",\n              inline: \"nearest\"\n            });\n          }\n        } else {\n          button.classList.remove(\"expanded-button\")\n          hint.style.display = \"none\"\n          link.style.display = \"\"\n        }\n      }\n\n      window.toggleNextButton = function(){\n        // adapted from Hint Hotkey add-on\n        var customEvent = document.createEvent('MouseEvents');\n        customEvent.initEvent('click', false, true);\n        var arr = document.getElementsByTagName('a');\n        for (var i=0; i<arr.length; i++) {\n          var el = arr[i];\n          if (el.style.display === 'none') {\n            continue;\n          }\n          if (el.classList.contains(\"hint\")) {\n            el.dispatchEvent(customEvent);\n            break\n          }\n        }\n      }\n        \n      const isToggleNextShortcut = shortcutMatcher(ToggleNextButtonShortcut)\n      ankingAddEventListener(\"keydown\", (evt) => {\n        if (evt.repeat) return\n        if (isToggleNextShortcut(evt)) {\n          toggleNextButton()\n        }\n      })\n    \n      const setupHintBtn = function(elem) {\n        const containerId = elem.id\n        const fieldName = elem.dataset.name\n        const button = elem.getElementsByClassName(\"button\")[0]\n        \n        if (ButtonAutoReveal[fieldName]) {\n          toggleHintBtn(containerId, noScrolling=true)\n        }\n    \n        const isShortcut = shortcutMatcher(ButtonShortcuts[fieldName])\n        const isToggleAllShortcut = shortcutMatcher(ToggleAllButtonsShortcut)\n        ankingAddEventListener(\"keydown\", (evt) => {\n          if (evt.repeat) return\n          if (isShortcut(evt) || isToggleAllShortcut(evt)) {\n            toggleHintBtn(containerId)\n          }\n        })\n      }\n    \n      const hints = document.getElementsByClassName(\"hintBtn\")\n      for (let i = 0; i < hints.length; i++) {\n        setupHintBtn(hints[i])\n      }\n    })()\n    </script>\n\n\n<!-- INCREMENTAL IMAGE OCCLUSION SCRIPT -->\n<script>\n  document.getElementById(\"qa\").style.removeProperty(\"display\")\n</script>\n<script data-name=\"Incremental IO\" data-version=\"v0.1\">\n  /* Script by Matthias Metelka @kleinerpirat */  \n\n  function setupIncrementalIO() {\n    var observer = new MutationObserver(() => {\n      document.getElementById(\"button-toggle-all\").addEventListener(\"click\", toggleAll)\n      document.getElementById(\"button-reveal-next\").addEventListener(\"click\", toggleNext)\n      \n      let rect = document.querySelector(\".closet-rect.is-active\")\n      if (rect) {\n        activate(rect)\n        observer.disconnect()\n        globalThis.AnkingIORects = document.querySelectorAll(\".closet-rect.is-active\")\n        for (let rect of globalThis.AnkingIORects) {\n          rect.addEventListener(\"click\", reveal)\n        }\n        if (!globalThis.AnKingIOListening) {\n          let isRevealIncShortcut = shortcutMatcher(RevealIncrementalShortcut)\n          let isToggleAllShortcut = shortcutMatcher(ToggleAllOcclusionsShortcut)\n          document.addEventListener(\"keydown\", (evt) => {\n            if (evt.repeat) return\n            evt = evt || window.event\n            if (isRevealIncShortcut(evt)) {\n              toggleNext()\n            } else if (isToggleAllShortcut(evt)) {\n              toggleAll()\n            }\n          })\n          globalThis.AnKingIOListening = true\n        }\n        \n        let buttons = document.getElementsByClassName(\"extra-btn\")\n        function toggle() {\n          if (!this.classList.contains(\"uncollapsed\")) {\n            this.nextElementSibling.classList.remove(\"hidden\")\n            this.classList.add(\"uncollapsed\")\n          }\n          else {\n            this.nextElementSibling.classList.add(\"hidden\")\n            this.classList.remove(\"uncollapsed\")\n          }\n        }\n        for (let button of buttons) {\n          button.addEventListener(\"click\", toggle)\n        }\n        \n      }\n    })\n    observer.observe(document.getElementById(\"qa\"), {\n      childList: true,\n      subtree: true\n    })\n    \n    \n    function toggleNext() {\n      let active = document.querySelector(\".closet-rect.is-highlighted\")\n      if (active) incrementalReveal.call(active)\n    }\n    \n    function toggleAll() {\n      let allRevealed = true\n      for (let rect of globalThis.AnkingIORects) {\n        if (!rect.classList.contains(\"revealed\")) allRevealed = false\n      }\n      if (allRevealed) {\n        for (let rect of globalThis.AnkingIORects) {\n          hide.call(rect)\n        }\n        let newActiveRect = document.querySelector(\".closet-rect.is-active\")\n        activate(newActiveRect)\n      } else {\n        for (let rect of globalThis.AnkingIORects) {\n          reveal.call(rect)\n        }\n      }\n    }\n    \n    function incrementalReveal() {\n      reveal.call(this)\n      let next = this.nextElementSibling\n      if (next) {\n        while (next.classList.contains(\"revealed\") && next.nextElementSibling) {\n          next = next.nextElementSibling\n        }\n        if (!next.classList.contains(\"revealed\")) activate(next)\n      }\n      else if (document.getElementById(\"extra-content\")) {\n        document.getElementById(\"extra-content\").classList.remove(\"hidden\")\n      }\n    }\n    \n    function reveal() {\n      this.classList.remove(\"is-highlighted\")\n      this.classList.add(\"revealed\")\n    }\n    \n    function hide() {\n      this.classList.remove(\"revealed\")\n      this.removeEventListener(\"click\", incrementalReveal)\n    }\n    \n    function activate(rect) {\n      rect.classList.add(\"is-highlighted\")\n      rect.addEventListener(\"click\", incrementalReveal)\n    }\n    \n  }\n  setupIncrementalIO()\n</script>\n\n<script data-name=\"Closet Setup\" data-version=\"v0.1\">\n  function closetUserLogic(closet, preset, chooseMemory) {\n    const elements = closet.template.anki.getQaChildNodes();\n    const memory = chooseMemory(\"closet__1\");\n    const filterManager = closet.FilterManager.make(preset, memory.map);\n    \n    const output = [[elements, memory, filterManager]];\n    \n    filterManager.install(\n      closet.recipes.shuffle({ tagname: \"mix\" }),\n      closet.recipes.order({ tagname: \"ord\" }),\n      \n      closet.flashcard.recipes.cloze({\n        tagname: \"c\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n      }),\n      closet.flashcard.recipes.multipleChoice({\n        tagname: \"mc\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n      }),\n      closet.flashcard.recipes.sort({\n        tagname: \"sort\",\n        defaultBehavior: closet.flashcard.behaviors.Show,\n      }),\n      closet.browser.recipes.rect({\n        tagname: \"rect\",\n        defaultBehavior: closet.flashcard.behaviors.Hide,\n      }),\n    );;\n    return output;\n  }\n  \n  var getAnkiPrefix = () => globalThis.ankiPlatform === \"desktop\" ? \"\" : globalThis.AnkiDroidJS ? \"https://appassets.androidplatform.net\" : \".\";\n  \n  var closetPromise = import(`${getAnkiPrefix()}/__closet-0.5.3.js`);\n  closetPromise\n  .then(\n    ({ closet }) => closet.template.anki.initialize(closet, closetUserLogic, \"{{Card}}\", \"{{Tags}}\", \"back\"),\n    (error) => console.log(\"An error occured while loading Closet:\", error))\n  .catch((error) => console.log(\"An error occured while executing Closet:\", error));\n  \n  if (globalThis.onUpdateHook) {\n    onUpdateHook.push(() => closetPromise);\n  }\n</script>\n</div>",
                "bafmt": "",
                "bfont": "",
                "bqfmt": "",
                "bsize": 0,
                "did": null,
                "name": "Card 1",
                "ord": 0,
                "qfmt": "<!-- version 120f234 -->\n<script>\n// ############## USER CONFIGURATION START ##############\n// Auto flip to back when One by one mode.\nvar autoflip = false \n\n// ##############  TAG SHORTCUT  ##############\nvar toggleTagsShortcut = \"C\";\n\n// ENTER THE TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND\nvar tagID = \"XXXYYYZZZ\"\n\n// WHETHER THE WHOLE TAG OR ONLY THE LAST PART SHOULD BE SHOWN\n\nvar numTagLevelsToShow = 0;\n\n// ############## USER CONFIGURATION END ##############\n</script>\n\n\n<!-- CLOZE ONE BY ONE AUTOFLIP -->\n<script>\n  var clozeOneByOneEnabled = true;\n  \n  window.clozeHints = [];\n  if (clozeOneByOneEnabled) {\n    // Save cloze hints to display in the back\n    let clozes = document.getElementsByClassName(\"cloze\")\n    for(var i = 0; i < clozes.length; i++) {\n      if (clozes[i].innerHTML === \"[...]\") {\n        window.clozeHints.push(\"\")\n      } else {\n        window.clozeHints.push(clozes[i].innerHTML)\n      }\n    }\n\n    if(autoflip) {\n      // avoid flickering. Must unset this in the back.\n      document.getElementById(\"qa\").style.display = \"none\";\n\n      if (window.pycmd) {\n        pycmd(\"ans\")\n      } else if (window.showAnswer) {\n        showAnswer()\n      }    \n      // AnkiMobile JS API doesn't have one for show answer. \n      // Best alternative is to use Taps/Swipes to show answer.\n    }\n  }\n</script>\n\n<!-- Shortcut Matcher Function -->\n<script>\n  var specialCharCodes = {\n    \"-\": \"minus\",\n    \"=\": \"equal\",\n    \"[\": \"bracketleft\",\n    \"]\": \"bracketright\",\n    \";\": \"semicolon\",\n    \"'\": \"quote\",\n    \"`\": \"backquote\",\n    \"\\\\\": \"backslash\",\n    \",\": \"comma\",\n    \".\": \"period\",\n    \"/\": \"slash\",\n  };\n  // Returns function that match keyboard event to see if it matches given shortcut.\n  function shortcutMatcher(shortcut) {\n    let shortcutKeys = shortcut.toLowerCase().split(/[+]/).map(key => key.trim())\n    let mainKey = shortcutKeys[shortcutKeys.length - 1]\n    if (mainKey.length === 1) {\n      if (/\\d/.test(mainKey)) {\n        mainKey = \"digit\" + mainKey\n      } else if (/[a-zA-Z]/.test(mainKey)) {\n        mainKey = \"key\" + mainKey\n      } else {\n        let code = specialCharCodes[mainKey];\n        if (code) {\n          mainKey = code\n        }\n      }\n    }\n    let ctrl = shortcutKeys.includes(\"ctrl\")\n    let shift = shortcutKeys.includes(\"shift\")\n    let alt = shortcutKeys.includes(\"alt\")\n\n    let matchShortcut = function (ctrl, shift, alt, mainKey, event) {\n      if (mainKey !== event.code.toLowerCase()) return false\n      if (ctrl !== (event.ctrlKey || event.metaKey)) return false\n      if (shift !== event.shiftKey) return false\n      if (alt !== event.altKey) return false\n      return true\n    }.bind(window, ctrl, shift, alt, mainKey)\n    \n    return matchShortcut\n  }\n</script>\n\n<!-- NOT-PERSISTING EVENT LISTENER -->\n<script>\n  if (window.ankingEventListeners) {\n    for (const listener of ankingEventListeners) {\n      const type = listener[0]\n      const handler = listener[1]\n      document.removeEventListener(type, handler)\n    }\n  }\n  window.ankingEventListeners = []\n  \n  window.ankingAddEventListener = function(type, handler) {\n    document.addEventListener(type, handler)\n    window.ankingEventListeners.push([type, handler])\n  }\n</script>\n\n<!-- CLICKABLE COLORFUL TAGS -->\n{{#Tags}}\n<div id=\"tags-container\">{{clickable::Tags}}</div>\n<script>\n  var tagContainer = document.getElementById(\"tags-container\")\n  if (tagContainer.childElementCount == 0) {\n    var tagList = tagContainer.innerHTML.split(\" \");\n    var kbdList = [];\n    var newTagContent = document.createElement(\"div\");\n\n    for (var i = 0; i < tagList.length; i++) {\n      var newTag = document.createElement(\"kbd\");\n      var tag = tagList[i];\n      // numTagLevelsToShow == 0 means the whole tag should be shown\n      if(numTagLevelsToShow != 0){\n        tag = tag.split('::').slice(-numTagLevelsToShow).join(\"::\");\n      }\n      newTag.innerHTML = tag;\n      newTagContent.append(newTag)\n    }\n    tagContainer.innerHTML = newTagContent.innerHTML;\n    tagContainer.style.cursor = \"default\";\n  }\n  if (tagContainer.innerHTML.indexOf(tagID) != -1) {\n    tagContainer.style.backgroundColor = \"rgba(251,11,11,.15)\";\n  }\n\n  function showtags() {\n    var tagContainerShortcut = document.getElementById(\"tags-container\");\n\n    if (tagContainerShortcut.style.display\n      === \"none\") {\n      tagContainerShortcut.style.display = \"block\";\n    } else {\n      tagContainerShortcut.style.display =\n        \"none\";\n    }\n  }\n  \n  var isShortcut = shortcutMatcher(toggleTagsShortcut)\n  ankingAddEventListener('keyup', function (e) {\n      if (isShortcut(e)) {\n          showtags();\n      }\n  });\n\n</script>\n{{/Tags}}\n\n{{#I0}}\n{{#Image}}\n<div id=\"front-info\">\n   <a href=\"https://www.ankingmed.com\"><img src=\"_AnKingRound.png\"></a>\n   <div>This is an Image Occlusion one by one card: Please flip to the backside.</div>\n   <div class=\"help\">\n      <p>On the backside, your task is to incrementally reveal an image occlusion.\n         Click on the active rectangle to reveal it and activate the next.</p>\n   </div>\n</div>\n\n<div hidden>{{Image}}</div>\n{{/Image}}\n{{/I0}}",
                "scratchPad": true
            }
        ],
        "type": 0,
        "usn": -1,
        "vers": []
    },
    "1606536512076": {
        "css": "/*    ANKINGOVERHAUL   */\n\n/* The AnKing wishes you the best of luck! Be sure to check out our YouTube channel and Instagram\n for all things Anki and Med School related (including how to customize this card type and use these decks):  \n\t\twww.AnKingMed.com\n\t\t\t@ankingmed    \t\t\t\n*/\n\n/*#########################################################\n################  USER CUSTOMIZATION START  ##############*/\n/* You can choose colors at www.htmlcolorcodes.com */\n\n/* TIMER ON/OFF */\n.timer {\n  display: block; /* ‘none’ or ‘block’ */\n}\n\n/* TAGS ON/OFF DESKTOP & MOBILE*/\n#tags-container {\n  display: none; /* ‘none’ or ‘block’ */\n}\n\n.mobile #tags-container {\n  display: none; /* ‘none’ or ‘block’ */\n}\n\n/* MOVE TAGS UP FOR 'NO-DISTRACTIONS' ADD-ON */\n#tags-container {\n  padding-bottom: 0px; /* 0 normal, 55 to move up */\n}\n\n\n/*~~~~~~~~~FONT SIZE~~~~~~~~~*/\n/*NOTE: anything with 'px' will keep a font that size indefinitely, \n'rem' is a fraction of this size above and allows all text to change size with the above setting */\n/* Desktop */\nhtml {\n  font-size: 28px;\n}\n/* Mobile */\n.mobile {\n  font-size: 28px;\n}\n\n/*IPAD ADJUSTMENTS (currently not applied)\n.ipad .card,\n.ipad #extra {\n  font-size: 28px;\n}\n.ipad .hints {\n  font-size: 24px;\n}\n.ipad #firstaid,\n.ipad #sketchy,\n.ipad #pixorize,\n.ipad #physeo,\n.ipad #additional {\n  font-size: 20px !important;\n}\n*/\n\n/*REVEALED HINTS FONT SIZE*/\n.hints {\n  font-size: .85rem;\n}\n\n/*Other Fields Font Size*/\n#firstaid,\n#sketchy,\n#pixorize,\n#physeo,\n#additional {\n  font-size: .6rem !important;\n}\n\n/*Other Fields Font Size on Mobile*/\n.mobile #firstaid,\n.mobile #sketchy,\n.mobile #pixorize,\n.mobile #physeo,\n.mobile #additional {\n  font-size: 20px !important;\n}\n\n/*~~~~~~~~~FONT STYLE~~~~~~~~~*/\n.card,\nkbd {\n  font-family: Arial Greek, Arial; /*Step exam's font is Arial Greek*/\n}\n\n/*~~~~~~~MAX IMAGE HEIGHT/WIDTH~~~~~~~*/\nimg {\n  max-width: 85%;\n  max-height: 100%;\n}\n\n#extra img,\n#notes img,\n#missed img,\n#pathoma img,\n#bnb img {\n  max-width: 85%;\n}\n\n#firstaid img,\n#sketchy img,\n#pixorize img,\n#physeo img,\n#additional img {\n  max-width: 60%;\n}\n\n\n/*~~~~~~~~~COLORS~~~~~~~~~/\n/* Default Text Color */\n.card {\n  color: black;\n}\n/* Background Color */\n.card {\n  background-color: #D1CFCE;\n}\n/* Cloze Color */\n.cloze {\n  color: blue;\n}\n/* \"Extra\" Field Color */\n#extra {\n  color: navy;\n}\n/* Hint Reveal Color */\n.hints {\n  color: #4297F9;\n}\n/* Missed Questions Hint Reveal Color */\n#missed {\n  color: red;\n}\n/* Timer Countdown Color */\n.timer {\n  color: transparent;\n}\n\n\n/*~~~~~~~~NIGHT MODE COLORS~~~~~~~~*/\n/* NM Default Text Color */\n.nightMode.card,\n.night_mode .card {\n  color: #FFFAFA !important;\n}\n/* NM Background Color */\n.nightMode.card,\n.night_mode .card {\n  background-color: #272828 !important;\n}\n/* NM Cloze Color */\n.nightMode .cloze,\n.night_mode .cloze {\n  color: #4297F9 !important;\n}\n/* NM \"Extra\" Field Color */\n.nightMode #extra,\n.night_mode #extra {\n  color: magenta;\n}\n/* NM Hint Reveal Color */\n.nightMode .hints,\n.night_mode .hints {\n  color: cyan;\n}\n\n\n/* ~~~~~COLOR ACCENTS FOR BOLD-ITALICS-UNDERLINE~~~~~~*/\nb {\n  color: inherit;\n}\n\nu {\n  color: inherit;\n}\n\ni {\n  color: inherit;\n}\n\n/*################  USER CUSTOMIZATION END  ################\n###########################################################*/\n\n/* Styling For Whole Card*/\n.card {\n  text-align: center;\n  font-size: 1rem;\n  height: 100%;\n  margin: 0px 15px;\n  flex-grow: 1;\n  padding-bottom: 1em;\n  margin-top: 15px;\n}\n.mobile .card {\n  padding-bottom: 5em;\n  margin: 1ex .3px;\n}\n\n/* Style the horizontal line */\nhr { opacity: .7 }\n\n/* Formatting For Timer */\n.timer {\n  font-size: 20px;\n  margin: 12em auto auto auto;\n}\n\n\n/* ~~~~~~~~~ FIELDS ~~~~~~~~~ */\n/* Cloze format */\n.cloze {\n  font-weight: bold;\n}\n\n/* Adjustments For Cloze Edit In Review On Mobile */\n.clozefield,\n.mobile .editcloze {\n  display: none;\n}\n.editcloze,\n.mobile .clozefield {\n  display: block;\n}\n\n/* Text When Hint Is Shown*/\n.hints {\n  font-style: italic;\n}\n\n/*add spacing between hints and extra field*/\n.hints+#extra {\n  margin-top: 1rem; \n}\n\n/* Extra Field */\n#extra {\n  font-style: italic;\n  font-size: 1rem;\n}\n\n\n/* ~~~~~~~~~DETAILS FOR IMAGES~~~~~~~~~ */\n.mobile .card img {\n  max-width: 100% !important;\n}\n#extra img {\n  min-width: 30%;\n}\n\n.mobile .hints, .mobile #extra img {\n  max-width: 100% !important;\n}\n\n/* Classes for individual cards */\n.image40 img { width: 40% !important;}\n.image50 img { width: 50% !important;}\n.image60 img { width: 60% !important;}\n.image70 img { width: 70% !important;}\n.image80 img { width: 80% !important;}\n.image90 img { width: 90% !important;}\n\n.image40 img,\n.image50 img,\n.image60 img,\n.image70 img,\n.image80 img,\n.image90 img {\n  display: block;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.mobile .image40 img,\n.mobile .image50 img,\n.mobile .image60 img,\n.mobile .image70 img,\n.mobile .image80 img,\n.mobile .image90 img {\n  width: auto !important;\n}\n\n/*Image hover zoom*/\n#extra img:active,\n#notes img:active,\n#missed img:active,\n#pathoma img:active,\n#bnb img:active {\n  transform: scale(1.2);\n}\n\n#firstaid img:active,\n#sketchy img:active,\n#pixorize img:active,\n#physeo img:active,\n#additional img:active {\n  transform: scale(1.5);\n}\n\n.mobile img:active {\n  transform: scale(1.0) !important;\n}\n\n\n/* ~~~~~~~MNEMONICS LEFT JUSTIFIED~~~~~~~ */\n.mnemonics {\n  display: inline-block;\n  text-align: left; /* can change to center to 'turn off' this feature */\n}\n.centerbox {\n  text-align: center;\n}\n\n\n/* ~~~~~~~~~ ADD-ON CONFIGURATIONS ~~~~~~~~~ */\n/*Compatibility with Image Style Editor add-on*/\n.card {\n  --w: 0%;\n}\n.mobile .card {\n  --w: 100% !important;\n}\n\n/*Max image width for resize images in editor add-on */\n.card [class^=ui-] img {\n  max-width: 100% !important;\n}\n\n/*Compatibility with resize images in editor add-on */\n.resizer {\n  min-width: 0% !important;\n}\n.mobile .resizer {\n  min-width: 100% !important;\n}\n\n/* Fix to make pop-up dictionary images the right size */\n.qtip img {\n  max-width: 95% !important;\n  max-height: 95% !important;\n}\n\n\n/* ~~~~~~ANKING HYPERLINK IMAGE~~~~~~ */\n#pic {\n  opacity: 0.0;\n  font-size: 16px;\n  font-family: Comic Sans !important;\n  font-style: bold;\n  height: 50px;\n  border: 0;\n  position: fixed;\n  bottom: 10px;\n  right: 10px;\n  display: block;\n}\n\n#pic:hover {\n  opacity: 1;\n  transition: opacity 0.2s ease;\n}\n\n.mobile #pic {\n  display: none;\n}\n\n/* ~~~~~~~~~ TAGS ~~~~~~~~~ */\n/* Container To Fix Tags At Bottom Of Screen */\n#tags-container {\n  position: fixed;\n  bottom: .5px;\n  width: 100%;\n  line-height: .45rem;\n  margin-left: -15px;\n  background-color: transparent;\n}\n\n\n/* Clickable Tags (need to download the add-on) */\nkbd {\n  display: inline-block;\n  letter-spacing: .1px;\n  font-weight: bold;\n  font-size: 10px !important;\n  text-shadow: none !important;\n  padding: 0.05rem 0.1rem !important;\n  margin: 1px !important;\n  border-radius: 4px;\n  border-width: 1.5px !important;\n  border-style: solid;\n  background-color: transparent !important;\n  box-shadow: none !important;\n  opacity: 0.5;\n  vertical-align: middle !important;\n  line-height: auto !important;\n  height: auto !important;\n}\n\n/* Tag Becomes More Visible On Hover */\nkbd:hover {\n  opacity: 1;\n  transition: opacity 0.2s ease;\n}\n\n/* Tag Colors */\nkbd:nth-of-type(1n+0) { border-color: #F44336; color: #F44336!important; }\nkbd:nth-of-type(2n+0) { border-color: #9C27B0; color: #9C27B0!important; }\nkbd:nth-of-type(3n+0) { border-color: #3F51B5; color: #3F51B5!important; }\nkbd:nth-of-type(4n+0) { border-color: #03A9F4; color: #03A9F4!important; }\nkbd:nth-of-type(5n+0) { border-color: #009688; color: #009688!important; }\nkbd:nth-of-type(6n+0) { border-color: #C0CA33; color: #C0CA33!important; }\nkbd:nth-of-type(7n+0) { border-color: #FF9800; color: #FF9800!important;}\nkbd:nth-of-type(8n+0) { border-color: #FF5722; color: #FF5722!important; }\nkbd:nth-of-type(9n+0) { border-color: #9E9E9E; color: #9E9E9E!important; }\nkbd:nth-of-type(10n+0) { border-color: #607D8B; color: #607D8B!important; }\n\n/* Tag Mobile Adjustments */\n.mobile kbd {\n  opacity: .9;\n  margin: 1px !important;\n  display: inline-block;\n  font-size: 10px !important;\n}\n.mobile #tags-container {\n  line-height: 0.6rem;\n  margin-left: 0px;\n}\n\n\n/* OME BANNER */\n.banner-ome {\n  max-width: 300px;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n.mobile .banner-ome {\n  display: none;\n}\n\n#button-ome {\n  display: none;\n}\n.mobile #button-ome {\n  display: inline;\n}\n\n\n/* ~~~~~~~~~BUTTON LAYOUT~~~~~~~~~ */\n.button-general {\n  outline: 0;\n  border-radius: 0.12em;\n  border: 1px solid #525253 !important;\n  padding: 5px 5px;\n  text-align: center;\n  display: inline-block;\n  font-size: 9.5px;\n  background-color: #424242;\n  color: #AFAFAF !important;\n  margin-top: 8px;\n}\n\n.mobile .button-general {\n  font-size: 18px;\n  padding: 9px 7px;\n}\n\n.expanded-button {\n  display: block;\n  margin: auto;\n  margin-top: 10px;\n  font-weight: bold;\n  width: 50% !important;\n  background: #ababab !important;\n  color: black !important;\n  font-weight: bold;\n  width: 50% !important;\n}\n\n\n#button-mq:not(.expanded-button) {\n  color: #c26165 !important;\n}\n\n\nhtml:not(.mobile) .button-general:hover {\n  cursor: default;\n  background-color: #E9E9E9 !important;\n  color: #363638 !important;\n}\n\nhtml:not(.mobile) #button-mq:hover {\n  background-color: #FA8072 !important;\n  color: black !important;\n}\n\nhtml:not(.mobile) #button-pat:hover {\n  background-color: #EABCE4 !important;\n}\n\nhtml:not(.mobile) #button-fa:hover {\n  background-color: #FFF1B8 !important;\n}\n\nhtml:not(.mobile) #button-sketchy:hover {\n  background-color: #7EDEC0 !important;\n}\n\nhtml:not(.mobile) #button-pixorize:hover {\n  background-color: #ea8eed !important;\n}\n\nhtml:not(.mobile) #button-physeo:hover {\n  background-color: #A1C0C6 !important;\n}\n\nhtml:not(.mobile) #button-ome:hover {\n  background-color: #47C3F3 !important;\n}",
        "did": 1542938001933,
        "flds": [
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "media": [],
                "meta": null,
                "name": "Text",
                "ord": 0,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "media": [],
                "name": "Extra",
                "ord": 1,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "media": [],
                "name": "Lecture Notes",
                "ord": 2,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "media": [],
                "name": "Missed Questions",
                "ord": 3,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "media": [],
                "name": "Pathoma",
                "ord": 4,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "media": [],
                "name": "Boards and Beyond",
                "ord": 5,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "media": [],
                "name": "First Aid",
                "ord": 6,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "media": [],
                "name": "Sketchy",
                "ord": 7,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "Pixorize",
                "ord": 8,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "description": "",
                "font": "Arial",
                "media": [],
                "name": "Physeo",
                "ord": 9,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "OME",
                "ord": 10,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "media": [],
                "meta": null,
                "name": "Additional Resources",
                "ord": 11,
                "rtl": false,
                "size": 16,
                "sticky": false
            },
            {
                "collapsibleFieldsCollapseByDefault": false,
                "description": "",
                "font": "Arial",
                "meta": null,
                "name": "One by one",
                "ord": 12,
                "rtl": false,
                "size": 8,
                "sticky": false
            }
        ],
        "id": 1606536512076,
        "latexPost": "\\end{document}",
        "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
        "latexsvg": false,
        "mod": 1645205190,
        "name": "AnKingOverhaul",
        "req": [
            [
                0,
                "any",
                [
                    0,
                    12
                ]
            ]
        ],
        "sortf": 0,
        "tags": [],
        "tmpls": [
            {
                "afmt": "<script>\n// ##############  HINT REVEAL SHORTCUTS  ##############\n// All shortcuts will also open with \"H\" if using the Hint Hotkeys add-on \nvar ButtonShortcuts = {\n    \"Lecture Notes\" : \"Alt+1\",\n    \"Missed Questions\" : \"Alt+2\",\n    \"Pathoma\" : \"Alt+3\",\n    \"Boards and Beyond\" : \"Alt+4\",\n    \"First Aid\" : \"Alt+5\",\n    \"Sketchy\" : \"Alt+6\",\n    \"Pixorize\" : \"Alt+7\",\n    \"Physeo\" : \"Alt+8\",\n    \"OME\" : \"Alt+F1\",\n    \"Additional Resources\" : \"Alt+9\",\n}\nvar ToggleAllButtonsShortcut = \"'\"\nvar ToggleNextButtonShortcut = \"H\";\n// ##############  SHOW HINTS AUTOMATICALLY  ##############\nvar ButtonAutoReveal = {\n    \"Lecture Notes\" : false,\n    \"Missed Questions\" : false,\n    \"Pathoma\" : false,\n    \"Boards and Beyond\" : false,\n    \"First Aid\" : false,\n    \"Sketchy\" : false,\n    \"Pixorize\" : false,\n    \"Physeo\" : false,\n    \"OME\" : false, // not currently a button\n    \"Additional Resources\" : false,\n}\n\nvar ScrollToButton = true;\n\n// ##############  TAG SHORTCUT  ##############\nvar toggleTagsShortcut = \"C\";\n\n// ENTER THE TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND\nvar tagID = \"XXXYYYZZZ\"\n\n// WHETHER THE WHOLE TAG OR ONLY THE LAST PART SHOULD BE SHOWN\n\nvar numTagLevelsToShow = 0;\n\n// ##############  CLOZE ONE BY ONE  ##############\nvar revealNextShortcut = \"N\" \nvar revealNextWordShortcut = \"Shift+N\"\nvar toggleAllShortcut = \",\"\n\n// Changes how \"Reveal Next\" and clicking behaves. Either \"cloze\" or \"word\".\n// \"word\" reveals word by word. \nvar revealNextClozeMode = \"cloze\" \n\n// What cloze is hidden with\nvar clozeHider = (elem) => \"👑\"\n/* \nYou can replace the above line with below examples. '█' or '_' works well for hiding clozes.\n\n// Fixed length:\nvar clozeHider = (elem) => \"███\"\n// Replace each character with \"█\":\nvar clozeHider = (elem) => \"█\".repeat(elem.textContent.length)\n// Show whitespaces:\nvar clozeHider = (elem) => \"[\" + elem.textContent.split(\" \").map((t) => \"█\".repeat(t.length)).join(\" \") + \"]\"\n// Color-filled box (doesn't hide images):\nvar clozeHider = (elem) => `<span style=\"background-color: red; color: transparent;\">${elem.innerHTML}</span>`\n*/\n\n</script>\n\n\n<div class=\"clozefield\" id=\"text\">{{cloze:Text}}</div>\n\n<!-- ##############  EDIT CLOZE DURING REVIEW  ##############\n\t\t\t-change below (not above) to  \"edit:cloze:Text\" for editable field, \n\t\t\t\tbut be sure to have the correct add-on installed-->\n\n<div class=\"editcloze\" id=\"text\">{{edit:cloze:Text}}</div>\n\n\n<br>\n\n<!-- ##############  TEXT-TO-SPEECH ##############\nreplace the arrows/dashes from the statement below with double curly brackets-->\n\n<!--tts en_US voices=Apple_Samantha speed=1.4:cloze-only:Text-->\n\n\n<hr>\n\n<!-- BUTTON FIELDS -->\n<!-- ClOZE ONE BY ONE BUTTONS -->\n{{#One by one}}\n<button id=\"button-reveal-next\" class=\"button-general\" onclick=\"revealNextCloze()\">Reveal Next</button>\n<button id=\"button-toggle-all\" class=\"button-general\" onclick=\"toggleAllCloze()\">Toggle All</button>\n<br />\n{{/One by one}}\n\n\n<!-- OME AUTO OPEN FIELD -->\n<div class=\"banner-ome\">{{#OME}}{{OME}}{{/OME}}</div>\n\n<!-- BUTTON FIELDS -->\n{{#Lecture Notes}}\n<span id = \"hint-ln\" class=\"hintBtn\" data-name=\"Lecture Notes\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-ln')\"></a>\n  <button id=\"button-ln\" class=\"button-general\" onclick=\"toggleHintBtn('hint-ln')\">\n    <img src=\"_Anking_v3.png\"> Lecture Notes\n  </button>\n  <div id=\"notes\" class=\"hints\" style=\"display: none;\">{{edit:Lecture Notes}}</div>\n</span>\n{{/Lecture Notes}}\n\n{{#Missed Questions}}\n<span id = \"hint-mq\" class=\"hintBtn\" data-name=\"Missed Questions\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-mq')\"></a>\n  <button id=\"button-mq\" class=\"button-general\" onclick=\"toggleHintBtn('hint-mq')\">\n    <img src=\"_Anking_v3.png\"> Missed Questions\n  </button>\n  <div id=\"missed\" class=\"hints\" style=\"display: none;\">{{edit:Missed Questions}}</div>\n</span>\n{{/Missed Questions}}\n\n{{#Pathoma}}\n<span id = \"hint-pat\" class=\"hintBtn\" data-name=\"Pathoma\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-pat')\"></a>\n  <button id=\"button-pat\" class=\"button-general\" onclick=\"toggleHintBtn('hint-pat')\">\n    <img src=\"_pathoma.icon.png\"> \n  </button>\n  <div id=\"pathoma\" class=\"hints\" style=\"display: none;\">{{edit:Pathoma}}</div>\n</span>\n{{/Pathoma}}\n\n{{#Boards and Beyond}}\n<span id = \"hint-bb\" class=\"hintBtn\" data-name=\"Boards and Beyond\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-bb')\"></a>\n  <button id=\"button-bb\" class=\"button-general\" onclick=\"toggleHintBtn('hint-bb')\">\n    <img src=\"_b&b.icon.png\"> Boards and Beyond\n  </button>\n  <div id=\"bnb\" class=\"hints\" style=\"display: none;\">{{edit:Boards and Beyond}}</div>\n</span>\n{{/Boards and Beyond}}\n\n\n<!-- Extra field -->\n{{#Extra}}<p></p>\n<div id=\"extra\">{{edit:Extra}}</div>\n<br>{{/Extra}}\n\n{{#First Aid}}\n<span id = \"hint-fa\" class=\"hintBtn\" data-name=\"First Aid\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-fa')\"></a>\n  <button id=\"button-fa\" class=\"button-general\" onclick=\"toggleHintBtn('hint-fa')\">\n    <img src=\"_first-aid.icon_v2.1.png\"> First Aid\n  </button>\n  <div id=\"firstaid\" class=\"hints\" style=\"display: none;\">{{edit:First Aid}}</div>\n</span>\n{{/First Aid}}\n\n{{#Sketchy}}\n<span id = \"hint-sketchy\" class=\"hintBtn\" data-name=\"Sketchy\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-sketchy')\"></a>\n  <button id=\"button-sketchy\" class=\"button-general\" onclick=\"toggleHintBtn('hint-sketchy')\">\n    <img src=\"_sketchy.icon.png\"> Sketchy\n  </button>\n  <div id=\"sketchy\" class=\"hints\" style=\"display: none;\">{{edit:Sketchy}}</div>\n</span>\n{{/Sketchy}}\n\n{{#Pixorize}}\n<span id = \"hint-pixorize\" class=\"hintBtn\" data-name=\"Pixorize\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-pixorize')\"></a>\n  <button id=\"button-pixorize\" class=\"button-general\" onclick=\"toggleHintBtn('hint-pixorize')\">\n    <img src=\"_pixorize.png\"> Pixorize\n  </button>\n  <div id=\"pixorize\" class=\"hints\" style=\"display: none;\">{{edit:Pixorize}}</div>\n</span>\n{{/Pixorize}}\n\n{{#Physeo}}\n<span id = \"hint-physeo\" class=\"hintBtn\" data-name=\"Physeo\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-physeo')\"></a>\n  <button id=\"button-physeo\" class=\"button-general\" onclick=\"toggleHintBtn('hint-physeo')\">\n    <img src=\"_physeologo.icon.png\"> \n  </button>\n  <div id=\"physeo\" class=\"hints\" style=\"display: none;\">{{edit:Physeo}}</div>\n</span>\n{{/Physeo}}\n\n<!-- OME FIELD (only shows on mobile)-->\n{{#OME}}\n<span id = \"hint-ome\" class=\"hintBtn\" data-name=\"OME\">\n  <a onclick=\"toggleHintBtn('hint-ome')\"></a>\n  <button id=\"button-ome\" class=\"button-general\" onclick=\"toggleHintBtn('hint-ome')\">\n    <img src=\"_omelogo.icon.png\"> OnlineMedEd\n  </button>\n  <div id=\"ome\" class=\"hints\" style=\"display: none;\">{{edit:OME}}</div>\n</span>\n{{/OME}}\n\n{{#Additional Resources}}\n<span id = \"hint-ar\" class=\"hintBtn\" data-name=\"Additional Resources\">\n  <a href=\"#\" class=\"hint\" onclick=\"toggleHintBtn('hint-ar')\"></a>\n  <button id=\"button-ar\" class=\"button-general\" onclick=\"toggleHintBtn('hint-ar')\">\n    <img src=\"_Anking_v3.png\"> Additional Resources\n  </button>\n  <div id=\"additional\" class=\"hints\" style=\"display: none;\">{{edit:Additional Resources}}</div>\n</span>\n{{/Additional Resources}}\n\n\n<!-- ANKING HYPERLINK IMAGE -->\n<a href=\"https://www.ankingmed.com\"><img src=\"_AnKingRound.png\" alt=\"The AnKing\" id=\"pic\"></a>\n\n<!-- NOT-PERSISTING EVENT LISTENER -->\n<script>\n  if (window.ankingEventListeners) {\n    for (const listener of ankingEventListeners) {\n      const type = listener[0]\n      const handler = listener[1]\n      document.removeEventListener(type, handler)\n    }\n  }\n  window.ankingEventListeners = []\n  \n  window.ankingAddEventListener = function(type, handler) {\n    document.addEventListener(type, handler)\n    window.ankingEventListeners.push([type, handler])\n  }\n</script>\n\n<!-- Shortcut Matcher Function -->\n<script>\n  var specialCharCodes = {\n    \"-\": \"minus\",\n    \"=\": \"equal\",\n    \"[\": \"bracketleft\",\n    \"]\": \"bracketright\",\n    \";\": \"semicolon\",\n    \"'\": \"quote\",\n    \"`\": \"backquote\",\n    \"\\\\\": \"backslash\",\n    \",\": \"comma\",\n    \".\": \"period\",\n    \"/\": \"slash\",\n  };\n  // Returns function that match keyboard event to see if it matches given shortcut.\n  function shortcutMatcher(shortcut) {\n    let shortcutKeys = shortcut.toLowerCase().split(/[+]/).map(key => key.trim())\n    let mainKey = shortcutKeys[shortcutKeys.length - 1]\n    if (mainKey.length === 1) {\n      if (/\\d/.test(mainKey)) {\n        mainKey = \"digit\" + mainKey\n      } else if (/[a-zA-Z]/.test(mainKey)) {\n        mainKey = \"key\" + mainKey\n      } else {\n        let code = specialCharCodes[mainKey];\n        if (code) {\n          mainKey = code\n        }\n      }\n    }\n    let ctrl = shortcutKeys.includes(\"ctrl\")\n    let shift = shortcutKeys.includes(\"shift\")\n    let alt = shortcutKeys.includes(\"alt\")\n\n    let matchShortcut = function (ctrl, shift, alt, mainKey, event) {\n      if (mainKey !== event.code.toLowerCase()) return false\n      if (ctrl !== (event.ctrlKey || event.metaKey)) return false\n      if (shift !== event.shiftKey) return false\n      if (alt !== event.altKey) return false\n      return true\n    }.bind(window, ctrl, shift, alt, mainKey)\n    \n    return matchShortcut\n  }\n</script>\n\n<!-- HINT BUTTONS SETUP -->\n<script>\n    (function() {\n      window.toggleHintBtn = function(containerId, noScrolling=false) {\n        const container = document.getElementById(containerId)\n        const link = container.getElementsByTagName(\"a\")[0]\n        const button = container.getElementsByTagName(\"button\")[0]\n        const hint = container.getElementsByTagName(\"div\")[0]\n    \n        if (hint.style.display == \"none\") {\n          button.classList.add(\"expanded-button\")\n          hint.style.display = \"block\"\n          link.style.display = \"none\"\n          if (ScrollToButton && !noScrolling) {\n            hint.scrollIntoView({\n              behavior: \"smooth\", // \"auto\" for instant scrolling\n              block: \"start\",\n              inline: \"nearest\"\n            });\n          }\n        } else {\n          button.classList.remove(\"expanded-button\")\n          hint.style.display = \"none\"\n          link.style.display = \"\"\n        }\n      }\n\n      window.toggleNextButton = function(){\n        // adapted from Hint Hotkey add-on\n        var customEvent = document.createEvent('MouseEvents');\n        customEvent.initEvent('click', false, true);\n        var arr = document.getElementsByTagName('a');\n        for (var i=0; i<arr.length; i++) {\n          var el = arr[i];\n          if (el.style.display === 'none') {\n            continue;\n          }\n          if (el.classList.contains(\"hint\")) {\n            el.dispatchEvent(customEvent);\n            break\n          }\n        }\n      }\n        \n      const isToggleNextShortcut = shortcutMatcher(ToggleNextButtonShortcut)\n      ankingAddEventListener(\"keydown\", (evt) => {\n        if (evt.repeat) return\n        if (isToggleNextShortcut(evt)) {\n          toggleNextButton()\n        }\n      })\n    \n      const setupHintBtn = function(elem) {\n        const containerId = elem.id\n        const fieldName = elem.dataset.name\n        const button = elem.getElementsByClassName(\"button\")[0]\n        \n        if (ButtonAutoReveal[fieldName]) {\n          toggleHintBtn(containerId, noScrolling=true)\n        }\n    \n        const isShortcut = shortcutMatcher(ButtonShortcuts[fieldName])\n        const isToggleAllShortcut = shortcutMatcher(ToggleAllButtonsShortcut)\n        ankingAddEventListener(\"keydown\", (evt) => {\n          if (evt.repeat) return\n          if (isShortcut(evt) || isToggleAllShortcut(evt)) {\n            toggleHintBtn(containerId)\n          }\n        })\n      }\n    \n      const hints = document.getElementsByClassName(\"hintBtn\")\n      for (let i = 0; i < hints.length; i++) {\n        setupHintBtn(hints[i])\n      }\n    })()\n    </script>\n\n<!-- CLOZE ONE BY ONE SCRIPT -->\n<style>\n  .cloze[data-content]:hover {\n    cursor: pointer;\n  }\n  .cloze[data-hint] {\n    color: #009400 !important;\n  }\n</style>\n\n<script>\n  (function() {\n    var clozeOneByOneEnabled = true;\n    try {\n        clozeOneByOneEnabled = `{{One by one}}` !== \"\"\n    } catch (exception) {\n      console.log(exception)\n    }\n\n    if (!clozeOneByOneEnabled) {\n      return\n    }\n    \n    const revealCloze = function(elem) {\n      // Checking for dataset.content is undefined may not be needed anymore?\n      if (elem.dataset.content === undefined) {\n        return\n      }\n      elem.innerHTML = elem.dataset.content\n      rerunMathJax()\n\n      delete elem.dataset.content\n      delete elem.dataset.hint\n    }\n\n    const revealClozeWord = function(elem) {\n      if (elem.dataset.content === undefined) {\n        return\n      }\n      if (elem.dataset.hidden !== undefined) {\n        let words = elem.dataset.hidden.split(\" \");\n        if (words.length == 1) {\n          revealCloze(elem)\n          delete elem.dataset.hidden\n          delete elem.dataset.revealed\n        } else {\n          elem.dataset.revealed = elem.dataset.revealed + \" \" + words[0]\n          elem.dataset.hidden = words.slice(1).join(\" \");\n          let temp = document.createElement(\"div\");\n          temp.innerHTML = elem.dataset.hidden;\n          elem.innerHTML = elem.dataset.revealed + \" \" + clozeHider(temp);\n          delete elem.dataset.hint\n        }\n      } else {\n        let temp = document.createElement(\"div\");\n        temp.innerHTML = elem.dataset.content;\n        elem.dataset.hidden = temp.textContent;\n        elem.dataset.revealed = \"\";\n        revealClozeWord(elem)\n      }\n      rerunMathJax()\n    }\n\n    window.revealNextCloze = function() {\n      let nextHidden = document.querySelector(\".cloze[data-content]\")\n      if(!nextHidden) {\n          return\n      } \n      if (revealNextClozeMode === \"word\") {\n          revealClozeWord(nextHidden)\n      } else {\n          revealCloze(nextHidden)\n      }\n    }\n\n    const hideAllCloze = function(initial) {\n      let clozes = document.getElementsByClassName(\"cloze\")\n      let count = 0 // hidden cloze count\n      for (let i = 0; i < clozes.length; i++) {\n        let cloze = clozes[i]\n        if (cloze.offsetWidth === 0) {\n          continue\n        }\n        cloze.dataset.content = cloze.innerHTML\n        if(window.clozeHints && window.clozeHints[count]) {\n          cloze.innerHTML = window.clozeHints[count]\n          cloze.dataset.hint = true\n        } else {\n          cloze.innerHTML = clozeHider(cloze)\n        }\n        count += 1\n        if (initial === true) {\n          cloze.addEventListener(\"touchend\", revealClozeClicked)\n          cloze.addEventListener(\"click\", revealClozeClicked)\n        }\n      }\n    }\n\n    window.toggleAllCloze = function() {\n      let elems = document.querySelectorAll(\".cloze[data-content]\")\n      let button = document.getElementById(\"button-toggle-all\")\n      if(elems.length > 0) {\n        for (let i = 0; i < elems.length; i++) {\n            revealCloze(elems[i])\n        }\n      } else {\n        hideAllCloze(initial=false)\n      }\n    }\n\n    const revealClozeClicked = function(ev) {\n      let elem = ev.currentTarget\n      if (elem.dataset.content === undefined) {\n        return\n      }\n      if (!ev.altKey && (revealNextClozeMode !== \"word\")) {\n        revealCloze(elem)\n      } else {\n        revealClozeWord(elem)\n      }\n      ev.stopPropagation()\n      ev.preventDefault()\n    }      \n\n    const rerunMathJax = function() {\n      // rerun mathjax on the document so that the cloze text gets formatted\n      // ... for MathJax 2\n      try {\n          MathJax.Hub.Queue([\"Typeset\", MathJax.Hub]);\n      } catch {}\n      // ... for MathJax 3     \n      try {\n          MathJax.typesetPromise()\n      } catch {}\n    }\n    \n    // autoflip hides card in front template\n    document.getElementById(\"qa\").style.removeProperty(\"display\")\n    hideAllCloze(initial=true)\n\n    let isShowNextShortcut = shortcutMatcher(window.revealNextShortcut)\n    let isShowWordShortcut = shortcutMatcher(window.revealNextWordShortcut)\n    let isToggleAllShortcut = shortcutMatcher(window.toggleAllShortcut)\n    ankingAddEventListener(\"keydown\", (ev) => {\n      let next = isShowNextShortcut(ev)\n      let word = isShowWordShortcut(ev)\n      let all = isToggleAllShortcut(ev)\n      if (next || word) {\n        let elem = document.querySelector(\".cloze[data-content]\")\n        if (elem) {\n          if (next) {\n            revealCloze(elem)\n          } else {\n            revealClozeWord(elem)\n          }\n          ev.stopPropagation()\n          ev.preventDefault()\n        }\n      } else if (all) {\n        toggleAllCloze()\n        ev.stopPropagation()\n        ev.preventDefault()\n      }\n    });\n  })()\n</script>\n\n<!-- CLICKABLE COLORFUL TAGS -->\n{{#Tags}}\n<div id=\"tags-container\">{{clickable::Tags}}</div>\n<script>\n  var tagContainer = document.getElementById(\"tags-container\")\n  if (tagContainer.childElementCount == 0) {\n    var tagList = tagContainer.innerHTML.split(\" \");\n    var kbdList = [];\n    var newTagContent = document.createElement(\"div\");\n\n    for (var i = 0; i < tagList.length; i++) {\n      var newTag = document.createElement(\"kbd\");\n      var tag = tagList[i];\n      // numTagLevelsToShow == 0 means the whole tag should be shown\n      if(numTagLevelsToShow != 0){\n        tag = tag.split('::').slice(-numTagLevelsToShow).join(\"::\");\n      }\n      newTag.innerHTML = tag;\n      newTagContent.append(newTag)\n    }\n    tagContainer.innerHTML = newTagContent.innerHTML;\n    tagContainer.style.cursor = \"default\";\n  }\n  if (tagContainer.innerHTML.indexOf(tagID) != -1) {\n    tagContainer.style.backgroundColor = \"rgba(251,11,11,.15)\";\n  }\n\n  function showtags() {\n    var tagContainerShortcut = document.getElementById(\"tags-container\");\n\n    if (tagContainerShortcut.style.display\n      === \"none\") {\n      tagContainerShortcut.style.display = \"block\";\n    } else {\n      tagContainerShortcut.style.display =\n        \"none\";\n    }\n  }\n  \n  var isShortcut = shortcutMatcher(toggleTagsShortcut)\n  ankingAddEventListener('keyup', function (e) {\n      if (isShortcut(e)) {\n          showtags();\n      }\n  });\n\n</script>\n{{/Tags}}\n\n<!-- WIKIPEDIA SEARCHES -->\n<div id=\"popup-container\">\n  <button id=\"close-popup-btn\" onclick=\"closePopup(true)\">&times;</button>\n  <a id=\"open-wiki-btn\" href=\"\">&#8618;</a>\n  <div id=\"tc\"></div>\n  <div id=\"fadebottom_v\"></div>\n  <div id=\"ic\"><img id=\"popup-image\"></div>\n</div>\n<style>\n  #tc {\n    color: #222222;\n    position: absolute;\n    top: 16px;\n    margin: 0px;\n    left: 15px;\n    text-decoration: none;\n    height: 320px;\n    overflow: hidden;\n    overflow-y: scroll;\n    white-space: pre-wrap;\n    width: 300px;\n  }\n  \n  #tc p {\n    margin: 0px;\n  }\n  \n  #tc::-webkit-scrollbar {\n    display: none;\n  }\n  \n  #fadebottom_v {\n    height: 30px;\n    width: 300px;\n    background: -webkit-linear-gradient(270deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 1));\n    z-index: 111;\n    position: absolute;\n    bottom: 0px;\n    left: 15px;\n  }\n  \n  #hc {\n    color: #666;\n    font-weight: bold;\n  }\n  \n  #ic {\n    right: 0px;\n    top: 30px;\n    position: absolute;\n  }\n  \n  #ic img {\n    width: 160px;\n    height: auto;\n    object-fit: cover;\n    overflow: hidden;\n  }\n  \n  #popup-image {\n    width: 140px;\n    height: auto;\n  }\n  \n  #popup-container {\n    background: #fff;\n    position: absolute;\n    bottom: 30px;\n    right: 10px;\n    z-index: 110;\n    -webkit-box-shadow: 0 30px 90px -20px rgba(0, 0, 0, 0.3), 0 0 1px 1px rgba(0, 0, 0, 0.05);\n    box-shadow: 0 30px 90px -20px rgba(0, 0, 0, 0.3), 0 0 1px 1px rgba(0, 0, 0, 0.05);\n    padding: 0;\n    display: none;\n    font-size: 17px;\n    line-height: 20px;\n    border-radius: 2px;\n    width: 480px;\n    height: 340px;\n    overflow: hidden;\n    font-family: Arial;\n    text-align: left;\n    border: 1px solid #d0d0d0;\n    border-radius: 5px;\n  }\n  \n  #close-popup-btn {\n    position: absolute;\n    top: 1px;\n    right: 5px;\n    width: 32px;\n    height: 32px;\n    background: none;\n    border: 0;\n    cursor: pointer;\n    font-family: 'Josefin Sans', sans-serif;\n    font-size: 20px;\n    outline: none;\n    text-align: right;\n    z-index: 112;\n  }\n  \n  #open-wiki-btn {\n    position: absolute;\n    top: 10px;\n    right: 30px;\n    width: 15px;\n    height: 32px;\n    background: none;\n    border: 0;\n    cursor: pointer;\n    text-decoration: none;\n    color: #222222;\n    font-family: 'Josefin Sans', sans-serif;\n    font-size: 17px;\n    outline: none;\n    text-align: left;\n    z-index: 112;\n  }\n</style>\n\n<script>\n  function getSummaryFor(word) {\n    word = word.replace(/^[\\.,\\/#\\!$%\\^&\\*;:{}=\\-_`~() \\'\\s]+|[\\.,\\/#\\!$%\\^&\\*;:{}=\\-_`~()\\'\\s]+$/g, \"\");\n    var pc = document.getElementById(\"popup-container\");\n    var hc = document.getElementById(\"hc\");\n    var tc = document.getElementById(\"tc\");\n    var ic = document.getElementById(\"ic\");\n    var imgelem = document.getElementById(\"popup-image\");\n    imgelem.src = \"\";\n    var shortsum = \"\";\n    \n    fetch(\"https://en.wikipedia.org/api/rest_v1/page/summary/\" + word)\n    .then(function (response) { return response.json(); })\n    .then(function (response) {\n      shortsum = response.description;\n      shortsum = shortsum.replace(/(Disambiguation.*)/g, \"Disambiguation\");\n      tc.innerHTML = \"<span id='hc'>\" + capfl(shortsum) + \"</span>\" + \"\\n\" + response.extract_html + \"\\n\";\n      tc.style.width = \"420px\";\n      if (response.extract_html && !response.extract.endsWith(\"to:\")) {\n        pc.style.display = \"block\";\n        document.getElementById(\"open-wiki-btn\").href = response.content_urls.desktop.page;\n      } else { \n        pc.style.display = \"none\"; \n      }\n      if (!response.thumbnail.source || response.type === \"disambiguation\") {\n        tc.style.width = \"420px\";\n      } else { \n        tc.style.width = \"300px\"; imgelem.src = response.thumbnail.source; \n      }\n    })\n    .catch(function (error) { \n      console.log(error); \n    });\n  }\n  \n  function closePopup(deselectAlso = false) {\n    pcc.style.display = 'none';\n    if (deselectAlso) { clearSelection(); }\n  }\n\n  var pcc = document.getElementById(\"popup-container\");\n  var prevSel = \"\";\n  ankingAddEventListener('click', function () {\n    var currentSelection = getSelectionText();\n    if (currentSelection !== \"\") { prevSel = currentSelection; }\n    if (currentSelection && !mustClickW) {\n      getSummaryFor(currentSelection);\n    } else { closePopup(); }\n  });\n\n  ankingAddEventListener('keyup', function (e) {\n    if (e.key == \"w\") {\n      if (pcc.style.display === \"block\") { closePopup(); } else { getSummaryFor(prevSel); }\n    }\n  });\n\n  function getSelectionText() {\n    var text = \"\";\n    if (window.getSelection) {\n      text = window.getSelection().toString();\n    } else if (document.selection && document.selection.type != \"Control\") { text = document.selection.createRange().text; }\n    return text;\n  }\n\n  function capfl(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  function clearSelection() {\n    if (window.getSelection) { window.getSelection().removeAllRanges(); }\n    else if (document.selection) { document.selection.empty(); }\n  }\n  \n  //CUSTOMIZATION\n  //this is a variable controlling whether user must click the \"w\" key to open the popup.\n  //if set to true: user must select text, then click the \"w\" key to open wikipedia popup. Clicking \"w\" key again will close the popup. \n  //if set to false: user only needs to select text. popup will open automatically. Clicking \"w\" is an alternative but not obligatory way of opening/closing the popup in this mode.\n  //BELOW SET to true or to false. \n  var mustClickW = true;\n  //END CUSTOMIZATION\n</script>\n",
                "bafmt": "{{cloze:Text}}",
                "bfont": "Arial",
                "bqfmt": "{{cloze:Text}}",
                "bsize": 12,
                "did": null,
                "name": "Cloze",
                "ord": 0,
                "qfmt": "<!-- version 120f234 -->\n<div id=\"text\">{{cloze:Text}}</div>\n\n<br>\n\n<!-- ##############  Text-to-speech  ##############\nreplace the arrows/dashes from the statement below with double curly brackets-->\n\n<!--tts en_US voices=Apple_Samantha speed=1.4:cloze:Text-->\n\n\n<script>\n// ############## USER CONFIGURATION START ##############\n// Auto flip to back when One by one mode.\nvar autoflip = false \n\n// Timer config (timer length, timer finished message)\nvar minutes = 0\nvar seconds = 9\nvar timeOverMsg = \"<span style='color:#CC5B5B'>!<br/>!<br/>!<br/>!<br/>!<br/>!</span>\"\n\n// ##############  TAG SHORTCUT  ##############\nvar toggleTagsShortcut = \"C\";\n\n// ENTER THE TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND\nvar tagID = \"XXXYYYZZZ\"\n\n// WHETHER THE WHOLE TAG OR ONLY THE LAST PART SHOULD BE SHOWN\n\nvar numTagLevelsToShow = 0;\n\n// ############## USER CONFIGURATION END ##############\n</script>\n\n\n<!-- CLOZE ONE BY ONE AUTOFLIP -->\n<script>\n  var clozeOneByOneEnabled = true;\n  try {\n    clozeOneByOneEnabled = `{{One by one}}` !== \"\"\n  } catch (exception) {\n    console.log(exception)\n  }\n  \n  window.clozeHints = [];\n  if (clozeOneByOneEnabled) {\n    // Save cloze hints to display in the back\n    let clozes = document.getElementsByClassName(\"cloze\")\n    for(var i = 0; i < clozes.length; i++) {\n      if (clozes[i].innerHTML === \"[...]\") {\n        window.clozeHints.push(\"\")\n      } else {\n        window.clozeHints.push(clozes[i].innerHTML)\n      }\n    }\n\n    if(autoflip) {\n      // avoid flickering. Must unset this in the back.\n      document.getElementById(\"qa\").style.display = \"none\";\n\n      if (window.pycmd) {\n        pycmd(\"ans\")\n      } else if (window.showAnswer) {\n        showAnswer()\n      }    \n      // AnkiMobile JS API doesn't have one for show answer. \n      // Best alternative is to use Taps/Swipes to show answer.\n    }\n  }\n</script>\n\n<!-- NOT-PERSISTING EVENT LISTENER -->\n<script>\n  if (window.ankingEventListeners) {\n    for (const listener of ankingEventListeners) {\n      const type = listener[0]\n      const handler = listener[1]\n      document.removeEventListener(type, handler)\n    }\n  }\n  window.ankingEventListeners = []\n  \n  window.ankingAddEventListener = function(type, handler) {\n    document.addEventListener(type, handler)\n    window.ankingEventListeners.push([type, handler])\n  }\n</script>\n\n<!-- Shortcut Matcher Function -->\n<script>\n  var specialCharCodes = {\n    \"-\": \"minus\",\n    \"=\": \"equal\",\n    \"[\": \"bracketleft\",\n    \"]\": \"bracketright\",\n    \";\": \"semicolon\",\n    \"'\": \"quote\",\n    \"`\": \"backquote\",\n    \"\\\\\": \"backslash\",\n    \",\": \"comma\",\n    \".\": \"period\",\n    \"/\": \"slash\",\n  };\n  // Returns function that match keyboard event to see if it matches given shortcut.\n  function shortcutMatcher(shortcut) {\n    let shortcutKeys = shortcut.toLowerCase().split(/[+]/).map(key => key.trim())\n    let mainKey = shortcutKeys[shortcutKeys.length - 1]\n    if (mainKey.length === 1) {\n      if (/\\d/.test(mainKey)) {\n        mainKey = \"digit\" + mainKey\n      } else if (/[a-zA-Z]/.test(mainKey)) {\n        mainKey = \"key\" + mainKey\n      } else {\n        let code = specialCharCodes[mainKey];\n        if (code) {\n          mainKey = code\n        }\n      }\n    }\n    let ctrl = shortcutKeys.includes(\"ctrl\")\n    let shift = shortcutKeys.includes(\"shift\")\n    let alt = shortcutKeys.includes(\"alt\")\n\n    let matchShortcut = function (ctrl, shift, alt, mainKey, event) {\n      if (mainKey !== event.code.toLowerCase()) return false\n      if (ctrl !== (event.ctrlKey || event.metaKey)) return false\n      if (shift !== event.shiftKey) return false\n      if (alt !== event.altKey) return false\n      return true\n    }.bind(window, ctrl, shift, alt, mainKey)\n    \n    return matchShortcut\n  }\n</script>\n\n<!-- COUNTDOWN TIMER -->\n<div class=\"timer\" id=\"s2\"></div>\n<script>\n  function countdown(elementName, minutes, seconds) {\n    var element, endTime, mins, msLeft, time;\n    function twoDigits( n ) {\n      return (n <= 9 ? \"0\" + n : n); \n    }\n    function updateTimer() {\n      msLeft = endTime - (+new Date);\n      \n      if ( msLeft < 1000 ) {\n        element.innerHTML = timeOverMsg;\n      } else {\n        time = new Date( msLeft );\n        mins = time.getUTCMinutes();\n        element.innerHTML = mins + ':' + twoDigits(time.getUTCSeconds());\n        setTimeout( updateTimer, time.getUTCMilliseconds() + 500 );\n      }\n    }\n    element = document.getElementById(elementName);\n    endTime = (+new Date) + 1000 * (60*minutes + seconds) + 500;\n    updateTimer();\n  }\n  countdown(\"s2\", minutes, seconds ); //2nd value is the minute, 3rd is the seconds\n</script>\n\n\n<!-- ANKING HYPERLINK IMAGE -->\n<a href=\"https://www.ankingmed.com\"><img src=\"_AnKingRound.png\" alt=\"The AnKing\" id=\"pic\"></a>\n\n\n<script>\n    //DONT FADE BETWEEN CARDS\n\tqFade=0; if (typeof anki !== 'undefined') anki.qFade=qFade;\n</script>\n\n<!-- CLICKABLE COLORFUL TAGS -->\n{{#Tags}}\n<div id=\"tags-container\">{{clickable::Tags}}</div>\n<script>\n  var tagContainer = document.getElementById(\"tags-container\")\n  if (tagContainer.childElementCount == 0) {\n    var tagList = tagContainer.innerHTML.split(\" \");\n    var kbdList = [];\n    var newTagContent = document.createElement(\"div\");\n\n    for (var i = 0; i < tagList.length; i++) {\n      var newTag = document.createElement(\"kbd\");\n      var tag = tagList[i];\n      // numTagLevelsToShow == 0 means the whole tag should be shown\n      if(numTagLevelsToShow != 0){\n        tag = tag.split('::').slice(-numTagLevelsToShow).join(\"::\");\n      }\n      newTag.innerHTML = tag;\n      newTagContent.append(newTag)\n    }\n    tagContainer.innerHTML = newTagContent.innerHTML;\n    tagContainer.style.cursor = \"default\";\n  }\n  if (tagContainer.innerHTML.indexOf(tagID) != -1) {\n    tagContainer.style.backgroundColor = \"rgba(251,11,11,.15)\";\n  }\n\n  function showtags() {\n    var tagContainerShortcut = document.getElementById(\"tags-container\");\n\n    if (tagContainerShortcut.style.display\n      === \"none\") {\n      tagContainerShortcut.style.display = \"block\";\n    } else {\n      tagContainerShortcut.style.display =\n        \"none\";\n    }\n  }\n  \n  var isShortcut = shortcutMatcher(toggleTagsShortcut)\n  ankingAddEventListener('keyup', function (e) {\n      if (isShortcut(e)) {\n          showtags();\n      }\n  });\n\n</script>\n{{/Tags}}",
                "scratchPad": false
            }
        ],
        "type": 1,
        "usn": -1,
        "vers": []
    }
}